<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs移动端项目</title>
      <link href="/2020/02/17/nodejs%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/02/17/nodejs%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>仿造饿了么外卖商场的商城web app</p><ul><li><p>前后端分离</p><ul><li><p>前端</p><p>1.样式表使用stylus编写</p><p>2.框架：mint-ui  / 轮播：swiper库</p><p>3.better-scroll</p><p>4.date-fns  日期工具库</p></li><li><p>后台</p><ol><li><p>mongoose 连接MongoDB</p></li><li><p>express搭建服务器</p></li><li><p>axios 异步请求</p></li><li><p>cookie-parser 中间件操作 <strong>客户端中的cookie值</strong></p><p><code>app.use(cookieParser());</code></p></li><li><p>body-parser 中间件获取<strong>客户端POST</strong>请求的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br></pre></td></tr></table></figure></li><li><p>blueimp-md5 进行用户设定的密码加密。加密准则是将密码转换为MD5格式（<strong>作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串</strong>）</p></li><li><p>js-base64 :加密</p></li><li><p>moment：处理日期的库</p></li><li><p>morgan：http请求日志的中间件</p><p><code>app.use(logger(&#39;dev’));//加载日志中间件。</code></p></li><li><p>express-session: session管理</p></li></ol></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> @vue/cli </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时执行多个命令语句的concurrent</title>
      <link href="/2020/01/02/%E5%90%8C%E6%97%B6%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%AF%AD%E5%8F%A5%E7%9A%84concurrently/"/>
      <url>/2020/01/02/%E5%90%8C%E6%97%B6%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%AF%AD%E5%8F%A5%E7%9A%84concurrently/</url>
      
        <content type="html"><![CDATA[<p>最近在仿造一个资金后台管理系统的时候，因为后台系统和前端界面都需要启动，避免重复操作，使用<code>concurrently</code> 可以同时执行命令来执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"client-install"</span>:<span class="string">"npm install --prefix client"</span>,</span><br><span class="line">    <span class="string">"client"</span>:<span class="string">"npm start --prefix client"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node server.js"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"nodemon server.js"</span>,</span><br><span class="line">    <span class="string">"dev"</span>:<span class="string">"concurrently \"npm run server\" \"npm run client\""</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>1111</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试初级</title>
      <link href="/2019/12/29/%E6%B5%8B%E8%AF%95%E5%88%9D%E7%BA%A7/"/>
      <url>/2019/12/29/%E6%B5%8B%E8%AF%95%E5%88%9D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试的分类"><a href="#软件测试的分类" class="headerlink" title="软件测试的分类"></a>软件测试的分类</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>1.黑盒测试</p><p>2.白盒测试</p><p>3.灰盒测试</p><h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><p>1.功能测试</p><p>2.性能测试</p><p>3.安全测试</p><a id="more"></a><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><p>1.单元测试：方法，函数，类</p><p>2.集成测试：接口</p><p>3.系统测试：</p><p>​    3.1 功能</p><p>​    3.2安全</p><p>​    3.3性能</p><p>​    3.4兼容性</p><p>​    3.5易用性</p><p>4.验收测试</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>1.APP测试</p><p>2.WEB测试</p><p>3.物联网测试</p><p>4.车联网测试</p><p>5.小程序测试</p><p>6.嵌入式测试</p><h1 id="测试的流程"><a href="#测试的流程" class="headerlink" title="测试的流程"></a>测试的流程</h1><h2 id="1-需求分析阶段"><a href="#1-需求分析阶段" class="headerlink" title="1.需求分析阶段"></a>1.需求分析阶段</h2><h2 id="2-测试设计阶段"><a href="#2-测试设计阶段" class="headerlink" title="2.测试设计阶段"></a>2.测试设计阶段</h2><h3 id="1-测试计划"><a href="#1-测试计划" class="headerlink" title="1.测试计划"></a>1.测试计划</h3><h3 id="2-测试方案"><a href="#2-测试方案" class="headerlink" title="2.测试方案"></a>2.测试方案</h3><h3 id="3-测试策略"><a href="#3-测试策略" class="headerlink" title="3.测试策略"></a>3.测试策略</h3><h3 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4.测试用例"></a>4.测试用例</h3><h2 id="3-测试执行阶段"><a href="#3-测试执行阶段" class="headerlink" title="3.测试执行阶段"></a>3.测试执行阶段</h2><h2 id="4-测试总结阶段"><a href="#4-测试总结阶段" class="headerlink" title="4.测试总结阶段"></a>4.测试总结阶段</h2><h1 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h1><p>1.等价类</p><p>2.边界值</p><p>3.场景法</p><p>4.因果图</p><p>5.判定表</p><p>6.路径覆盖法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bcrypt初识</title>
      <link href="/2019/12/05/bcrypt%E5%88%9D%E8%AF%86/"/>
      <url>/2019/12/05/bcrypt%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>bcrypt是一个由两个外国人根据Blowfish加密算法所设计的密码散列函数。实现中bcrypt会使用一个加盐的流程以防御彩虹表攻击，同时bcrypt还是适应性函数，它可以借由增加迭代之次数来抵御暴力破解法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mongodb初识</title>
      <link href="/2019/12/03/mongodb%E5%88%9D%E8%AF%86/"/>
      <url>/2019/12/03/mongodb%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="mongodb安装与配置"><a href="#mongodb安装与配置" class="headerlink" title="mongodb安装与配置"></a>mongodb安装与配置</h1><p>1.设置数据存储路径，没有可以新建文件夹</p><p>“C:\data\db”</p><p>2.配置环境变量</p><p>将mongodb安装路径添加到 path中</p><p>3.开启：</p><p>命令行运行 mongod</p><p>4.链接：<br>命令行运行 mongo</p><h1 id="mongodb数据库的基本概念"><a href="#mongodb数据库的基本概念" class="headerlink" title="mongodb数据库的基本概念"></a>mongodb数据库的基本概念</h1><ul><li>数据库</li><li>集合</li><li>文档</li></ul><h1 id="常用语句："><a href="#常用语句：" class="headerlink" title="常用语句："></a>常用语句：</h1><p>1.查看所有数据库：</p><p>show dbs</p><p>2.查看当前所在数据库:</p><p>db</p><p>3.查看当前所在数据库中所有集合</p><p>show collections</p><p>4.查看当前数据库相关信息（名称、文档个数、视图、索引、大小等）</p><p>db.stats();</p><p>5.创建、打开、切换数据库</p><p>use 数据库名字</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575372080532.png" alt="1575372080532"></p><p>当前没有 zywdb数据库，use了会新建，但是因为是空集合，所以并不会显示。</p><p>插入一条数据</p><p><code>db.集合名.insertOne({})</code></p><p><code>db.students.insertOne({&quot;name&quot;:&quot;BuBu&quot;})</code></p><p>这个时候再 <code>show dbs</code> 显示所有数据库时候，才会显示刚刚use新建的数据库。</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575372278864.png" alt="1575372278864"></p><p>注：use 这个命令很特殊，它具有打开、 切换、 创建数据库的功能：如果打开的这个数据库存在就是打开这个数据库。如果打开的是一个不存在的数据库，那么就会创建一个同名的数据库，但是：注意：既然是创建一个新的数据库，那么就必须向数据库中新增一个集合(collections【就像关系数据库中的表】)，并且插入一条数据（这样这个数据库才算创建成功）。</p><p>如：往集合中插入一条数据。可以不用先创建集合，直接往里添加数据即可：<br><code>db.student.insertOne({&quot;name&quot;: &quot;xiaoming&quot;})</code></p><p>6.展示当前数据库中所有的集合：</p><p><code>show collections</code></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575372363932.png" alt="1575372363932"></p><p>7.显示该集合中所有的数据</p><p><code>db.students.find()</code></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575372449635.png" alt="1575372449635"></p><p>8.删除当前所在数据库</p><p><code>db.dropDatabase();</code></p><h1 id="在-node中使用-mongodb"><a href="#在-node中使用-mongodb" class="headerlink" title="在 node中使用 mongodb"></a>在 node中使用 mongodb</h1><p>1.使用官方的mongodb包</p><p>2.使用第三方 mongoose</p><h2 id="使用mongoose连接数据库"><a href="#使用mongoose连接数据库" class="headerlink" title="使用mongoose连接数据库"></a>使用mongoose连接数据库</h2><h3 id="1-导入"><a href="#1-导入" class="headerlink" title="1.导入"></a>1.导入</h3><p><code>const mongoose = require(&quot;mongoose&quot;)</code></p><h3 id="2-连接"><a href="#2-连接" class="headerlink" title="2.连接"></a>2.连接</h3><p>连接到mongodb数据库，前提是mongodb数据库已经启动，这里的数据库名称可以是新建的也可以是已经存在的。</p><p><strong>语法</strong>：<code>mongoose.connect(uri, options);</code></p><p><code>mongoose.connect(&quot;mongodb://localhost/itcast&quot;)</code></p><p><strong>额外的属性设置</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">"mongodb://localhost/itcast"</span>,&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-设计表结构Schema，规定数据规范"><a href="#3-设计表结构Schema，规定数据规范" class="headerlink" title="3.设计表结构Schema，规定数据规范"></a>3.设计表结构Schema，规定数据规范</h3><p><code>var Schema = mongoose.Schema();</code></p><p>定义一个用户表结构，即一个<code>Schema</code>实例。 Schemas不仅定义了文档和属性的结构，还定义了文档实例方法、静态模型方法、复合索引和文档被称为中间件的生命周期钩子。</p><p>默认语法：</p><p><code>var Schema = new Schema({},{})</code> </p><p>有两个参数：</p><ol><li>定义的数据规则</li><li>自定义的集合名字</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    username:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        index:<span class="literal">true</span><span class="comment">// 直接定义索引</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password:&#123;...&#125;,</span><br><span class="line">    email:&#123;...&#125;，</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>—— 额外定义索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.index(&#123;</span><br><span class="line">    username: <span class="number">1</span> / <span class="number">-1</span> (正向 和逆向 )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>—— 允许使用的 SchemaTypes</p><ul><li>String</li><li>Number</li><li>Date</li><li>Buffer</li><li>Boolean</li><li>Mixed</li><li>ObjectId</li><li>Array</li></ul><p>—— <code>Schema</code> 不只是定义 文档结构 和属性类型，还可以定义</p><ul><li>document 的instance methods【】</li><li>model 的 static Model methods【】</li><li>复合索引【***】</li><li>文档的生命周期钩子，也成为了中间件【】</li></ul><h3 id="4-生成Model"><a href="#4-生成Model" class="headerlink" title="4.生成Model"></a>4.生成Model</h3><p>将文档结构发布为模型model，具体操作数据库的也是该<code>model</code></p><p><strong>语法</strong>：<code>mongoose.model(modelName, schema)</code></p><p>第一个参数是： 一个<strong>大写</strong>的<strong>名词单数</strong>字符串用来表示你的<strong>集合名称</strong>，所以在这里的集合名称就是:<strong>users</strong>,生成规则是 <strong>小写</strong>+<strong>改成复数</strong>形式。</p><p>第二个参数： 定义的表结构</p><p>返回的是：模型构造函数，可以通过new生成实例</p><p><code>var User = mongoose.model(&#39;User&#39;,usersSchema);</code></p><p>注意： <code>.model()</code> 是对schema做了拷贝，要确保在调用<code>.model()</code> 之前所有的数据规则都已经添加完成。</p><h3 id="5-生成entity（document）"><a href="#5-生成entity（document）" class="headerlink" title="5.生成entity（document）"></a>5.生成entity（document）</h3><p>通过 构造函数新建该集合下的一条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    username:<span class="string">'杨静'</span>,</span><br><span class="line">    password:<span class="string">'12345'</span>,</span><br><span class="line">    email:<span class="string">"123@qq.com"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.保存该数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin.save(<span class="function">(<span class="params">err,ret</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"保存成功"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行之后可以通过语句查看</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575471311132.png" alt="1575471311132"></p><p>也可以在可视化工具内查看</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575471143206.png" alt="1575471143206"></p><h1 id="操作语句"><a href="#操作语句" class="headerlink" title="操作语句"></a>操作语句</h1><p>在创建数据的过程中，我们有定义规则<code>Schema</code>，也有生成一个<code>Model</code>，明确区分 api的操作对象。</p><p><code>Schema</code>不具备操作数据库的能力。<code>Model</code>和<code>entity</code>都可对数据库操作造成影响，<code>Model</code>比<code>entity</code>更具操作性。</p><p>1.获取到集合下的所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User.find(<span class="function">(<span class="params">err,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.获取到 特定的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.find(&#123;<span class="attr">name</span>:<span class="string">"/^zhang/"</span>&#125;,callback);<span class="comment">// 获取所有name为“zhang”开头的数据</span></span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><h2 id="1-document自带实例方法"><a href="#1-document自带实例方法" class="headerlink" title="1.document自带实例方法"></a>1.document自带实例方法</h2><h2 id="2-自定义实例方法"><a href="#2-自定义实例方法" class="headerlink" title="2.自定义实例方法"></a>2.自定义实例方法</h2><p>即是 对当前的Schema 实例的methods扩展方法。</p><p>注意： 避免使用 箭头函数，会造成this 指向错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userSchema.methods.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cosnsole.log(<span class="string">"Schema上的methods扩展方法-speak方法"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加在 Schema methods属性上的函数会编译到 <code>Model</code> 的prototype，也会暴露到每个<code>document</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.speak();<span class="comment">// document调用methods上的methods拓展方法</span></span><br></pre></td></tr></table></figure><h2 id="3、静态方法"><a href="#3、静态方法" class="headerlink" title="3、静态方法"></a>3、静态方法</h2><p>注意：同样<strong>不要</strong>在静态方法中使用 ES6 箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Schema 定义</span></span><br><span class="line">userSchema.statics.findByName = <span class="function"><span class="keyword">function</span>(<span class="params">name,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;<span class="attr">name</span>:<span class="keyword">new</span> <span class="built_in">RegExp</span>(name:<span class="string">"i"</span>)&#125;,cb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// document 调用</span></span><br><span class="line">admin.findByName(<span class="string">"zhangye"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="虚拟值-Virtual"><a href="#虚拟值-Virtual" class="headerlink" title="虚拟值 Virtual"></a>虚拟值 Virtual</h2><p>作为document的属性，但是不会保存到MongoDB中，包含 getter 和 setter，getter可用于格式化和组合字段数据，setter可以分解一个值到多个字段。</p><p><strong>注意： 虚拟值无法 对数据查询和字段选择。</strong></p><p>同样通过 <code>UserSchema</code> 定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义： 在 virtual("方法名")</span></span><br><span class="line">userSchema.virtual(<span class="string">"fullName"</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> .....</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用 直接当做属性调用。</span></span><br><span class="line"><span class="keyword">var</span> fullname = admin.fullName;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node资金系统</title>
      <link href="/2019/12/02/node+vue+mongodb%E6%B5%81%E6%B0%B4%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/12/02/node+vue+mongodb%E6%B5%81%E6%B0%B4%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>（目前涉及到知识点盲区有：passport验证机制，Vuex，passport验证，token生成）</p><p>与教程不同的是，未涉及到 bcrypt加密解密和头像组件调用。</p><h1 id="1-实现的功能-和接口"><a href="#1-实现的功能-和接口" class="headerlink" title="1.实现的功能 和接口"></a>1.实现的功能 和接口</h1><table><thead><tr><th></th><th>method</th><th></th><th></th></tr></thead><tbody><tr><td><code>/api/users/register</code></td><td>POST</td><td>用户注册</td><td></td></tr><tr><td><code>/api/users/login</code></td><td>POST</td><td>用户登录</td><td></td></tr><tr><td><code>/api/profiles</code></td><td>GET</td><td>show全部的profile数据信息</td><td>Authenticate认证</td></tr><tr><td><code>/api/profiles/add</code></td><td>POST</td><td>添加新的profile信息</td><td>Authenticate认证</td></tr><tr><td>/api/profiles/edit/:id</td><td>POST</td><td>编辑指定id的profile信息</td><td>Authenticate认证</td></tr><tr><td>/api/profiles/delete/:id</td><td>DELETE</td><td>删除指定id的peofile信息</td><td>Authenticate认证</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>UI框架：ElementUI</p><p>数据库：MongoDB</p><p>后台搭建：NodeJS-Express</p><h1 id="2-后端文件："><a href="#2-后端文件：" class="headerlink" title="2.后端文件："></a>2.后端文件：</h1><h2 id="2-用户功能："><a href="#2-用户功能：" class="headerlink" title="2.用户功能："></a>2.用户功能：</h2><h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h3><p><code>/api/users/register</code></p><p>方法： <strong>POST</strong></p><p>根据注册使用的邮箱查找数据，若无则成功注册。若有，返回”该邮箱已被注册”提示。注册成功之后保存到mongodb数据库中。并提示注册成功，跳转到 『登录页』</p><p>代码部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="comment">// const mongoose = require("mongoose");</span></span><br><span class="line"><span class="keyword">const</span> routers = express.Router();</span><br><span class="line"><span class="comment">// 引入 用户数据库模型文件</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../models/Users'</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"></span><br><span class="line">routers</span><br><span class="line">.post(<span class="string">'/register'</span>,(req,res)=&gt;&#123;</span><br><span class="line">        <span class="comment">// 1. 注册，检测账号是否重复 </span></span><br><span class="line">        User.findOne(&#123;<span class="attr">email</span>:req.body.email&#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">user</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(user) <span class="keyword">return</span> res.status(<span class="number">400</span>).json(<span class="string">"邮箱已被占用"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> newUser = <span class="keyword">new</span> User(&#123;</span><br><span class="line">                    name:req.body.name,</span><br><span class="line">                    email:req.body.email,</span><br><span class="line">                    password:req.body.password,</span><br><span class="line">                    identity:req.body.identity,</span><br><span class="line">                    date:<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span><br><span class="line">                &#125;);</span><br><span class="line">                newUser.save().then(<span class="function"><span class="params">user</span>=&gt;</span>&#123;res.json(user)&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="2-登录"><a href="#2-登录" class="headerlink" title="2.登录"></a>2.登录</h3><p><code>/api/users/login</code></p><p>方法：<strong>POST</strong></p><p>条件1：邮箱   条件2：密码。先核对邮箱，是否存在，不存在提示：“输入账号不存在”,存在再验证密码。密码验证无误之后，为该用户添加token令牌，提示登陆成功，跳转到 『 首页 (/index) 』</p><p>代码部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前期导入模块和 注册模块 一致</span></span><br><span class="line">router.post(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">        <span class="comment">// console.log(req.body)</span></span><br><span class="line">        <span class="keyword">const</span> email = req.body.email;</span><br><span class="line">        <span class="keyword">const</span> password = req.body.password;</span><br><span class="line"></span><br><span class="line">        User.findOne(&#123;email&#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">user</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!user) <span class="keyword">return</span> res.status(<span class="number">404</span>).json(<span class="string">"用户不存在"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 验证密码 </span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">parseInt</span>(user.password) == <span class="built_in">parseInt</span>(password))&#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">const</span> rule = &#123;</span><br><span class="line">                        id:user._id,</span><br><span class="line">                        name:user.name,</span><br><span class="line">                        identity:user.identity</span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    jwt.sign(rule,<span class="string">"secret"</span>,&#123;<span class="attr">expiresIn</span>:<span class="number">3600</span>&#125;,(err,token)=&gt;&#123;</span><br><span class="line">                        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">                        res.json(&#123;</span><br><span class="line">                            success:<span class="literal">true</span>,</span><br><span class="line">                            token:<span class="string">'Bearer '</span>+token</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span>=&gt;</span>res.status(<span class="number">404</span>).json(&#123;</span><br><span class="line">                success:<span class="literal">false</span></span><br><span class="line">            &#125;))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="3-知识盲区"><a href="#3-知识盲区" class="headerlink" title="3.知识盲区"></a><strong>3.知识盲区</strong></h3><h4 id="1-jsonwebtoken的使用"><a href="#1-jsonwebtoken的使用" class="headerlink" title="1.jsonwebtoken的使用"></a>1.jsonwebtoken的使用</h4><p>jwt.sign(规则,”secret”,过期时间,(err,token)=&gt;{…})`</p><p>token生成的机制及使用配置方法：</p><h4 id="2-POST获取参数的中间件body-parser使用"><a href="#2-POST获取参数的中间件body-parser使用" class="headerlink" title="2.POST获取参数的中间件body-parser使用"></a>2.POST获取参数的中间件body-parser使用</h4><h2 id="MongoDB数据存储部分"><a href="#MongoDB数据存储部分" class="headerlink" title="MongoDB数据存储部分"></a>MongoDB数据存储部分</h2><p>因为无需提前新建空白集合，我们只需要配置数据模型文件，插入第一个新的document就会生成对应的数据集合。</p><p>按照类别分别使用不同的规则放在不同的文件中，导出即可。</p><p>用户数据集合：（Users.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    password:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    email:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    date:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    identity:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = User = mongoose.model(<span class="string">"users"</span>,UserSchema);</span><br></pre></td></tr></table></figure><p>信息数据集合：（Profile.js）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ProfileSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    <span class="comment">// 1. 操作类型：出/入/报废/   2.型号  3.尺码  4.颜色  5.时间 6.备注</span></span><br><span class="line">    operationType:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    type:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    size:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    color:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    cdate:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    remark:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = Profile = mongoose.model(<span class="string">"profiles"</span>,ProfileSchema);</span><br></pre></td></tr></table></figure><h2 id="后台主函数app-js"><a href="#后台主函数app-js" class="headerlink" title="后台主函数app.js"></a>后台主函数app.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.express</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="comment">// 2.mongoose 连接数据库</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.set(<span class="string">'useFindAndModify'</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 2.1 获取数据库地址及参数文件 </span></span><br><span class="line"><span class="keyword">const</span> dbUrl = <span class="built_in">require</span>(<span class="string">'./config/key'</span>).mongoURL;</span><br><span class="line"><span class="comment">// passport</span></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</span><br><span class="line"><span class="comment">// 3.post 读取参数中间件 </span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">// 导入路由文件，加上类型前缀  使用.use 方法，区分不同功能API</span></span><br><span class="line"><span class="keyword">const</span>  profile = <span class="built_in">require</span>(<span class="string">"./routes/profile"</span>);</span><br><span class="line"><span class="keyword">const</span>  users = <span class="built_in">require</span>(<span class="string">"./routes/user"</span>);</span><br><span class="line"><span class="comment">// 使用路由 api</span></span><br><span class="line">app.use(<span class="string">'/api/profile'</span>,profile);</span><br><span class="line">app.use(<span class="string">'/api/user'</span>,users);</span><br><span class="line"></span><br><span class="line">app.use(passport.initialize())</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./config/passport"</span>)(passport);</span><br><span class="line"><span class="comment">// 2.1 mongoose 连接并测试</span></span><br><span class="line">mongoose.connect(dbUrl,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"数据库连接成功"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`数据库连接错误<span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 设置端口</span></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="comment">// 测试路径</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">"hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(port,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`端口已经在<span class="subst">$&#123;port&#125;</span>端口打开`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-前端文件"><a href="#3-前端文件" class="headerlink" title="3.前端文件"></a>3.前端文件</h1><p>使用 <code>@vue/cli 4</code> 生成的Vue 模板文件，默认的包括router，Vuex，需要注意的是，因为会调用后端接口，为解决跨域问题，需自建<code>vue.config.js</code> 配置文件，设置proxy参数。</p><h2 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: <span class="string">'/'</span>, <span class="comment">// 根域上下文目录</span></span><br><span class="line">    outputDir: <span class="string">'dist'</span>, <span class="comment">// 构建输出目录</span></span><br><span class="line">    assetsDir: <span class="string">'assets'</span>, <span class="comment">// 静态资源目录 (js, css, img, fonts)</span></span><br><span class="line">    lintOnSave: <span class="literal">false</span>, <span class="comment">// 是否开启eslint保存检测，有效值：ture | false | 'error'</span></span><br><span class="line">    runtimeCompiler: <span class="literal">true</span>, <span class="comment">// 运行时版本是否需要编译</span></span><br><span class="line">    transpileDependencies: [], <span class="comment">// 默认babel-loader忽略mode_modules，这里可增加例外的依赖包名</span></span><br><span class="line">    productionSourceMap: <span class="literal">true</span>, <span class="comment">// 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度</span></span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123; <span class="comment">// webpack配置，值位对象时会合并配置，为方法时会改写配置</span></span><br><span class="line">        <span class="keyword">if</span> (debug) &#123; <span class="comment">// 开发环境配置</span></span><br><span class="line">            config.devtool = <span class="string">'cheap-module-eval-source-map'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 生产环境配置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Object.assign(config, &#123; // 开发生产共同配置</span></span><br><span class="line">        <span class="comment">//     resolve: &#123;</span></span><br><span class="line">        <span class="comment">//         alias: &#123;</span></span><br><span class="line">        <span class="comment">//             '@': path.resolve(__dirname, './src'),</span></span><br><span class="line">        <span class="comment">//             '@c': path.resolve(__dirname, './src/components'),</span></span><br><span class="line">        <span class="comment">//             'vue$': 'vue/dist/vue.esm.js'</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123; <span class="comment">// webpack链接API，用于生成和修改webapck配置，https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">        <span class="comment">// if (debug) &#123;</span></span><br><span class="line">        <span class="comment">//     // 本地开发配置</span></span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//     // 生产开发配置</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    parallel: <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length &gt; <span class="number">1</span>, <span class="comment">// 构建时开启多进程处理babel编译</span></span><br><span class="line">    pluginOptions: &#123; <span class="comment">// 第三方插件配置</span></span><br><span class="line">    &#125;,</span><br><span class="line">    pwa: &#123; <span class="comment">// 单页插件相关配置 https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        open: <span class="literal">true</span>,</span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        port: <span class="number">8080</span>,</span><br><span class="line">        https: <span class="literal">false</span>,</span><br><span class="line">        hotOnly: <span class="literal">false</span>,</span><br><span class="line">        proxy: &#123; <span class="comment">// 配置跨域</span></span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000/api/'</span>,<span class="comment">// 后端接口视自己的而定</span></span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        before: <span class="function"><span class="params">app</span> =&gt;</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入口函数部分main-js："><a href="#入口函数部分main-js：" class="headerlink" title="入口函数部分main.js："></a>入口函数部分main.js：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'../src/http'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>UI 框架为ElementUI，在app.js中先导入配置</p><h2 id="根组件App-vue"><a href="#根组件App-vue" class="headerlink" title="根组件App.vue"></a>根组件App.vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> jwt_decode <span class="keyword">from</span> <span class="string">'jwt-decode'</span></span><br><span class="line">                                                            </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"app"</span>,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="keyword">if</span>(localStorage.eletoken)&#123;</span><br><span class="line">        <span class="keyword">const</span> decoded = jwt_decode(localStorage.eletoken);</span><br><span class="line">        <span class="comment">// 存储到Vuex</span></span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"setAuthenticated"</span>,!<span class="keyword">this</span>.isEmpty(decoded))</span><br><span class="line">        <span class="keyword">this</span>.$store.dispatch(<span class="string">"setUser"</span>,decoded)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 判断值是否为空</span></span><br><span class="line">        isEmpty(value)&#123;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                value === <span class="literal">undefined</span>||</span><br><span class="line">                value===<span class="literal">null</span>||</span><br><span class="line">                (<span class="keyword">typeof</span> value===<span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.keys(value).length === <span class="number">0</span>)||</span><br><span class="line">                (<span class="keyword">typeof</span> value===<span class="string">"string"</span> &amp;&amp; value.trim().length === <span class="number">0</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  #app&#123;</span></span><br><span class="line"><span class="regexp">    width:100%;</span></span><br><span class="line"><span class="regexp">    height:100%;</span></span><br><span class="line"><span class="regexp">    overflow: hidden;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>created()中是为了解决刷新Vuex中state清空的问题，因为 localStorage.eletoken中的数据除非手动清除不然会一直存在，登录了之后localStorage.eletoken会一直在，所有Vuex中的state根据 localStorage.eletoken校正即可。</p><h2 id="页面展示views"><a href="#页面展示views" class="headerlink" title="页面展示views"></a>页面展示views</h2><h3 id="1-注册页"><a href="#1-注册页" class="headerlink" title="1.注册页"></a>1.注册页</h3><p>使用了ElementUI的表单模块，需要定义校验规则rules，在提交按钮绑定注册事件，调用注册接口，注册完成之后 <code>this.$router.push(&#39;/login&#39;);</code></p><p>代码部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"register"</span>&gt;</span><br><span class="line">        &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"form_container"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"manage_tip"</span>&gt;</span><br><span class="line">                &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;SUNUGG在线查询操作系统&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;el-form </span><br><span class="line">                :model=<span class="string">"registerUser"</span> </span><br><span class="line">                status-icon </span><br><span class="line">                :rules=<span class="string">"rules"</span> </span><br><span class="line">                ref=<span class="string">"registerForm"</span> </span><br><span class="line">                label-width=<span class="string">"100px"</span> </span><br><span class="line">                <span class="class"><span class="keyword">class</span></span>=<span class="string">"registerForm"</span>&gt;</span><br><span class="line">                &lt;el-form-item label=<span class="string">"用户名"</span> prop=<span class="string">"name"</span>&gt;</span><br><span class="line">                    &lt;el-input </span><br><span class="line">                        v-model=<span class="string">"registerUser.name"</span> </span><br><span class="line">                        placeholder=<span class="string">"请输入用户名"</span></span><br><span class="line">                        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item label="邮箱" prop="email"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input </span></span><br><span class="line"><span class="regexp">                        v-model="registerUser.email" </span></span><br><span class="line"><span class="regexp">                        placeholder="请输入邮箱"</span></span><br><span class="line"><span class="regexp">                        &gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item label="密码" prop="password"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input </span></span><br><span class="line"><span class="regexp">                        type="password"</span></span><br><span class="line"><span class="regexp">                        v-model="registerUser.password"</span></span><br><span class="line"><span class="regexp">                        placeholder="请输入密码"</span></span><br><span class="line"><span class="regexp">                        &gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item label="确认密码" prop="password2"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input </span></span><br><span class="line"><span class="regexp">                        type="password"</span></span><br><span class="line"><span class="regexp">                        v-model="registerUser.password2"</span></span><br><span class="line"><span class="regexp">                        placeholder="请输入确认密码"</span></span><br><span class="line"><span class="regexp">                        &gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item label="身份"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-select</span></span><br><span class="line"><span class="regexp">                        v-model="registerUser.identity"</span></span><br><span class="line"><span class="regexp">                        placeholder="请选择身份"</span></span><br><span class="line"><span class="regexp">                    &gt;</span></span><br><span class="line"><span class="regexp">                        &lt;el-option lebel="管理员" value="manager"&gt;&lt;/</span>el-option&gt;</span><br><span class="line">                        &lt;el-option lebel=<span class="string">"员工"</span> value=<span class="string">"employer"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span></span><br><span class="line">                    &lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-form-item&gt;</span><br><span class="line"></span><br><span class="line">                &lt;el-form-item&gt;</span><br><span class="line">                    &lt;el-button </span><br><span class="line">                        type=<span class="string">"primary"</span> </span><br><span class="line">                        @click=<span class="string">"submitForm('registerForm')"</span></span><br><span class="line">                        <span class="class"><span class="keyword">class</span></span>=<span class="string">"registerBtn"</span></span><br><span class="line">                        &gt;注册&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>el-form-item&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;<span class="regexp">/el-form&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>section&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"register"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="comment">// 定义 确认密码和密码知否相同</span></span><br><span class="line">        <span class="keyword">var</span> validatePass2 = <span class="function">(<span class="params">rule,value,callback</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value !==<span class="keyword">this</span>.registerUser.password)&#123;</span><br><span class="line">                callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'两次输入的密码不一致！'</span>))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            registerUser:&#123;</span><br><span class="line">                name:<span class="string">""</span>,</span><br><span class="line">                email:<span class="string">""</span>,</span><br><span class="line">                password:<span class="string">""</span>,</span><br><span class="line">                password2:<span class="string">""</span>,</span><br><span class="line">                identity:<span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            rules:&#123;</span><br><span class="line">                name:[</span><br><span class="line">                    &#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">"不能为空"</span>,<span class="attr">trigger</span>:<span class="string">'blur'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">min</span>:<span class="number">2</span>,<span class="attr">max</span>:<span class="number">30</span>,<span class="attr">message</span>:<span class="string">"长度在2到30个字符之间"</span>&#125;</span><br><span class="line">                ],</span><br><span class="line">                email:[</span><br><span class="line">                    &#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">"不能为空"</span>,<span class="attr">trigger</span>:<span class="string">'blur'</span>,<span class="attr">type</span>:<span class="string">"email"</span>&#125;,</span><br><span class="line"></span><br><span class="line">                ],</span><br><span class="line">                password:[</span><br><span class="line">                    &#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">"不能为空"</span>,<span class="attr">trigger</span>:<span class="string">'blur'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">min</span>:<span class="number">6</span>,<span class="attr">max</span>:<span class="number">30</span>,<span class="attr">message</span>:<span class="string">"长度在6到30个字符之间"</span>,<span class="attr">trigger</span>:<span class="string">'blur'</span>&#125;</span><br><span class="line">                ],</span><br><span class="line">                password2:[</span><br><span class="line">                    &#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">message</span>:<span class="string">"不能为空"</span>,<span class="attr">trigger</span>:<span class="string">'blur'</span>&#125;,</span><br><span class="line">                    &#123;<span class="attr">validator</span>:validatePass2,<span class="attr">trigger</span>:<span class="string">'blur'</span>&#125;</span><br><span class="line">                ],</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        submitForm(formName) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs[formName].validate(<span class="function"><span class="params">valid</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(valid)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.$axios.post(<span class="string">"/api/user/register"</span>,<span class="keyword">this</span>.registerUser)</span><br><span class="line">                        .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                                message:<span class="string">"注册成功"</span>,</span><br><span class="line">                                type:<span class="string">"success"</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">    .register&#123;</span></span><br><span class="line"><span class="regexp">        position: relative;</span></span><br><span class="line"><span class="regexp">        width: 100%;</span></span><br><span class="line"><span class="regexp">        height: 100%;</span></span><br><span class="line"><span class="regexp">        background:url("../</span>assets/images/bg.jpg<span class="string">");</span></span><br><span class="line"><span class="string">        background-size: 100% 100%;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .form_container&#123;</span></span><br><span class="line"><span class="string">        width: 370px;</span></span><br><span class="line"><span class="string">        height: 210px;</span></span><br><span class="line"><span class="string">        position: absolute;</span></span><br><span class="line"><span class="string">        top: 10%;</span></span><br><span class="line"><span class="string">        left: 34%;</span></span><br><span class="line"><span class="string">        padding: 25px;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">        text-align: center;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .form_container .manage_tip .title&#123;</span></span><br><span class="line"><span class="string">        font-family: 'Microsoft YaHei';</span></span><br><span class="line"><span class="string">        font-weight: bold;</span></span><br><span class="line"><span class="string">        font-size: 26px;</span></span><br><span class="line"><span class="string">        color: #fff;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 表单样式 */</span></span><br><span class="line"><span class="string">    .registerForm&#123;</span></span><br><span class="line"><span class="string">        margin-top:20px;</span></span><br><span class="line"><span class="string">        background-color:#fff;</span></span><br><span class="line"><span class="string">        padding:20px 40px 20px 20px;</span></span><br><span class="line"><span class="string">        border-radius:5px;</span></span><br><span class="line"><span class="string">        box-shadow:0px 5px 10px #cccc;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .registerBtn&#123;</span></span><br><span class="line"><span class="string">        width:100%;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-登录页"><a href="#2-登录页" class="headerlink" title="2.登录页"></a>2.登录页</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"login"</span>&gt;</span><br><span class="line">        &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"form_container"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"manage_tip"</span>&gt;</span><br><span class="line">                &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;SUNUGG在线查询操作系统&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;el-form </span><br><span class="line">                :model=<span class="string">"loginUser"</span> </span><br><span class="line">                status-icon </span><br><span class="line">                :rules=<span class="string">"rules"</span> </span><br><span class="line">                ref=<span class="string">"loginForm"</span> </span><br><span class="line">                label-width=<span class="string">"100px"</span> </span><br><span class="line">                <span class="class"><span class="keyword">class</span></span>=<span class="string">"loginForm"</span>&gt;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                &lt;el-form-item label=<span class="string">"邮箱"</span> prop=<span class="string">"email"</span>&gt;</span><br><span class="line">                    &lt;el-input </span><br><span class="line">                        v-model=<span class="string">"loginUser.email"</span> </span><br><span class="line">                        placeholder=<span class="string">"请输入邮箱"</span></span><br><span class="line">                        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item label="密码" prop="password"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-input </span></span><br><span class="line"><span class="regexp">                        type="password"</span></span><br><span class="line"><span class="regexp">                        v-model="loginUser.password"</span></span><br><span class="line"><span class="regexp">                        placeholder="请输入密码"</span></span><br><span class="line"><span class="regexp">                        &gt;&lt;/</span>el-input&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &lt;el-form-item&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;el-button </span></span><br><span class="line"><span class="regexp">                        type="primary" </span></span><br><span class="line"><span class="regexp">                        @click="submitForm('loginForm')"</span></span><br><span class="line"><span class="regexp">                        class="loginBtn"</span></span><br><span class="line"><span class="regexp">                        &gt;登录&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;<span class="regexp">/el-form-item&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;还没有账号？去&lt;router-link to="/</span>register<span class="string">"&gt;注册&lt;/router-link&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/el-form&gt;</span></span><br><span class="line"><span class="string">        &lt;/section&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">import jwt_decode from 'jwt-decode'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name:"</span>login<span class="string">",</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            loginUser:&#123;</span></span><br><span class="line"><span class="string">                email:"</span><span class="string">",</span></span><br><span class="line"><span class="string">                password:"</span><span class="string">"</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            rules:&#123;</span></span><br><span class="line"><span class="string">                name:&#123;&#125;,</span></span><br><span class="line"><span class="string">                password:&#123;&#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        submitForm:function(formName)&#123;</span></span><br><span class="line"><span class="string">            this.$refs[formName].validate(valid=&gt;&#123;</span></span><br><span class="line"><span class="string">                if(valid)&#123;</span></span><br><span class="line"><span class="string">                    this.$axios.post("</span>/api/user/login<span class="string">",this.loginUser)</span></span><br><span class="line"><span class="string">                        .then(res=&gt;&#123;</span></span><br><span class="line"><span class="string">                            this.$message(&#123;</span></span><br><span class="line"><span class="string">                                message:"</span>登录成功<span class="string">",</span></span><br><span class="line"><span class="string">                                type:"</span>success<span class="string">"</span></span><br><span class="line"><span class="string">                            &#125;);</span></span><br><span class="line"><span class="string">                            // 拿到 token</span></span><br><span class="line"><span class="string">                            const &#123;token&#125;  = res.data;</span></span><br><span class="line"><span class="string">                            localStorage.setItem('eletoken',token);</span></span><br><span class="line"><span class="string">                            </span></span><br><span class="line"><span class="string">                            // 解析token</span></span><br><span class="line"><span class="string">                            const decoded = jwt_decode(token)</span></span><br><span class="line"><span class="string">                            console.log(decoded);</span></span><br><span class="line"><span class="string">                            // 存储到Vuex </span></span><br><span class="line"><span class="string">                        this.$store.dispatch("</span>setAuthenticated<span class="string">",!this.isEmpty(decoded));</span></span><br><span class="line"><span class="string">                        this.$store.dispatch("</span>setUser<span class="string">",decoded)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            this.$router.push('/index');</span></span><br><span class="line"><span class="string">                        &#125;)</span></span><br><span class="line"><span class="string">                        .catch(err=&gt;&#123;</span></span><br><span class="line"><span class="string">                            this.$message(&#123;</span></span><br><span class="line"><span class="string">                                message:"</span>登陆失败<span class="string">"</span></span><br><span class="line"><span class="string">                            &#125;)</span></span><br><span class="line"><span class="string">                        &#125;);</span></span><br><span class="line"><span class="string">                    </span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        // 判断值是否为空</span></span><br><span class="line"><span class="string">        isEmpty(value)&#123;</span></span><br><span class="line"><span class="string">            return(</span></span><br><span class="line"><span class="string">                value === undefined||</span></span><br><span class="line"><span class="string">                value===null||</span></span><br><span class="line"><span class="string">                (typeof value==="</span>object<span class="string">" &amp;&amp; Object.keys(value).length === 0)||</span></span><br><span class="line"><span class="string">                (typeof value==="</span>string<span class="string">" &amp;&amp; value.trim().length === 0)</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">    .login&#123;</span></span><br><span class="line"><span class="string">        position: relative;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        height: 100%;</span></span><br><span class="line"><span class="string">        background:url("</span>../assets/images/bg.jpg<span class="string">");</span></span><br><span class="line"><span class="string">        background-size: 100% 100%;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .form_container&#123;</span></span><br><span class="line"><span class="string">        width: 370px;</span></span><br><span class="line"><span class="string">        height: 210px;</span></span><br><span class="line"><span class="string">        position: absolute;</span></span><br><span class="line"><span class="string">        top: 10%;</span></span><br><span class="line"><span class="string">        left: 34%;</span></span><br><span class="line"><span class="string">        padding: 25px;</span></span><br><span class="line"><span class="string">        border-radius: 5px;</span></span><br><span class="line"><span class="string">        text-align: center;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .form_container .manage_tip .title&#123;</span></span><br><span class="line"><span class="string">        font-family: 'Microsoft YaHei';</span></span><br><span class="line"><span class="string">        font-weight: bold;</span></span><br><span class="line"><span class="string">        font-size: 26px;</span></span><br><span class="line"><span class="string">        color: #fff;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 表单样式 */</span></span><br><span class="line"><span class="string">    .loginForm&#123;</span></span><br><span class="line"><span class="string">        margin-top:20px;</span></span><br><span class="line"><span class="string">        background-color:#fff;</span></span><br><span class="line"><span class="string">        padding:20px 40px 20px 20px;</span></span><br><span class="line"><span class="string">        border-radius:5px;</span></span><br><span class="line"><span class="string">        box-shadow:0px 5px 10px #cccc;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    .loginBtn&#123;</span></span><br><span class="line"><span class="string">        width:100%;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，主页/index 只有登录之后才能被用户浏览到，即使手动输入localhost:8080/index 也不能访问到。我们需要在 路由文件内加上路由守卫 <code>router.beforeEach</code></p><h2 id="路由文件"><a href="#路由文件" class="headerlink" title="路由文件:"></a>路由文件:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'../views/index.vue'</span></span><br><span class="line"><span class="keyword">import</span> Register <span class="keyword">from</span> <span class="string">'../views/Register.vue'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> infoShow <span class="keyword">from</span> <span class="string">'../views/infoShow.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/"</span>,</span><br><span class="line">    redirect: <span class="string">"/index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/index"</span>,</span><br><span class="line">    name: <span class="string">"index"</span>,</span><br><span class="line">    component:Index,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">""</span>,<span class="attr">component</span>:Home&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">"/home"</span>,<span class="attr">name</span>:<span class="string">"home"</span>,<span class="attr">component</span>:Home&#125;,</span><br><span class="line">      &#123;<span class="attr">path</span>:<span class="string">"/infoshow"</span>,<span class="attr">name</span>:<span class="string">"infoshow"</span>,<span class="attr">component</span>:infoShow&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/register"</span>,</span><br><span class="line">    name: <span class="string">"register"</span>,</span><br><span class="line">    component:Register</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"*"</span>,</span><br><span class="line">    name: <span class="string">"/404"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../views/404.vue"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">"/login"</span>,</span><br><span class="line">    name: <span class="string">"login"</span>,</span><br><span class="line">    component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../views/Login.vue"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = localStorage.eletoken;</span><br><span class="line">  <span class="comment">// 如果是登录页 或者 注册页，可以直接访问。如果是登录之后才能显示的首页则需要判断是否有存储在localStorage中的eletoken</span></span><br><span class="line">  <span class="keyword">if</span>(to.path == <span class="string">'/login'</span> || to.path == <span class="string">'/register'</span>)&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否存在？在即下一页。不在即跳转到登录页</span></span><br><span class="line">    isLogin?next():next(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>因为我们加入了token并且设置了token有效期，那么如果token失效，我们会提示用户重新登陆，并跳转到登录页。在内部我们需要清除localStorage中的eletoken 和Vuex中state关于user的信息。</p><p>我们设置了请求和响应拦截函数，其中为请求和响应设置了跳转动画，增强页面友好性，另外 通过<code>axios.interceptors</code> 增加了异步请求和响应的拦截，请求时判断是否正确登陆，即是否有token，那么为所有首页数据请求增加请求头，增加token值（首页之后的内容只有登录了才能看到），响应请求时判断如果有返回错误是否是token失效（401），那么需要提示用户重新登陆。</p><h2 id="网络请求拦截http-js"><a href="#网络请求拦截http-js" class="headerlink" title="网络请求拦截http.js"></a>网络请求拦截http.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message,Loading&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Load;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startLoading</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Load = Loading.service(&#123;</span><br><span class="line">        lock:<span class="literal">true</span>,</span><br><span class="line">        text:<span class="string">"拼命加载中"</span>,</span><br><span class="line">        background:<span class="string">'rgba(0,0,0,0.7)'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">endLoading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Load.close(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    startLoading();</span><br><span class="line">    <span class="comment">// 发起请求的时候，如果有 token。为所有响应头加上 Authorization</span></span><br><span class="line">    <span class="keyword">if</span>(localStorage.eletoken)&#123;</span><br><span class="line">        config.headers.Authorization = localStorage.eletoken;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    endLoading();</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="comment">// 错误提示</span></span><br><span class="line">    endLoading();</span><br><span class="line">    Message.error(err.response.data);</span><br><span class="line">    <span class="comment">// 响应拦截的时候，对返回的错误码进行判断，如果是401，即token过期</span></span><br><span class="line">    <span class="keyword">if</span>(err.response.status == <span class="number">401</span>)&#123;</span><br><span class="line">        Message.error(<span class="string">'token失效请重新登陆'</span>)</span><br><span class="line">        <span class="comment">// 清除token</span></span><br><span class="line">        localStorage.removeItem(<span class="string">"eletoken"</span>);</span><br><span class="line">        router.push(<span class="string">'/login'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</span><br></pre></td></tr></table></figure><p>到目前为止 分别有根组件App.vue、路有文件、网络请求文件中都对token进行了操作。</p><h2 id="系统展示页"><a href="#系统展示页" class="headerlink" title="系统展示页"></a>系统展示页</h2><ol><li><p>404错误页</p><p>除了设定的几个路由，如果用户不慎点了错误的地址，都会显示404页面。</p><p>在路有文件中设定路由规则即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path:<span class="string">"*"</span>,</span><br><span class="line">   name: <span class="string">"/404"</span>,</span><br><span class="line">   component:<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">"../views/404.vue"</span>)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>404页面：</p><p>用了一张404图片简单展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"notfound"</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">"../assets/images/404.jpg"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .notfound&#123;</span><br><span class="line">        width:<span class="number">100</span>%;</span><br><span class="line">        height:<span class="number">100</span>%;</span><br><span class="line">        overflow:hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .notfound img&#123;</span><br><span class="line">        width:<span class="number">100</span>%;</span><br><span class="line">        height:<span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>2.home页</p><p>也是一进入的展示页，即/ , /index 需要 重定向到的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">            &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;SUN UGG查询友好系统&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p class="lead"&gt;专注于进出口货物流通创造GDP&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name:"home"</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .home&#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">        background: url(<span class="string">"../assets/images/bg2.jpg"</span>);</span><br><span class="line">        background-size: <span class="number">100</span>% <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">    .container&#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        padding-top: <span class="number">100</span>px;</span><br><span class="line">        background-color: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>);</span><br><span class="line">        text-align: center;</span><br><span class="line">        color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">    .title&#123;</span><br><span class="line">        font-size: <span class="number">30</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    .lead&#123;</span><br><span class="line">        margin-top: <span class="number">50</span>px;</span><br><span class="line">        font-size: <span class="number">22</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>3.用户信息页 infoshow</p><p>作为在home页内部展示的内容，是作为二级路由存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"infoshow"</span>&gt;</span><br><span class="line">        &lt;el-row type=<span class="string">"flex"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"row-bg"</span> justify=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;el-col :span=<span class="string">"8"</span> &gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"user"</span>&gt;</span><br><span class="line">                    &lt;img src=<span class="string">"../assets/images/avator.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-col&gt;</span><br><span class="line">            &lt;el-col :span=<span class="string">"16"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"userinfo"</span>&gt;</span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"user-item"</span>&gt;</span><br><span class="line">                        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-user-solid"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">                        &lt;span&gt;&#123;&#123;user.name&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"user-item"</span>&gt;</span><br><span class="line">                        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-s-tools"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">                        &lt;span&gt;&#123;&#123;user.identity==<span class="string">"manager"</span>?<span class="string">"管理员"</span>:<span class="string">"员工"</span>&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>el-col&gt;   </span><br><span class="line">        &lt;<span class="regexp">/el-row&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    name:"infoshow",</span></span><br><span class="line"><span class="regexp">    computed: &#123;</span></span><br><span class="line"><span class="regexp">        user()&#123;</span></span><br><span class="line"><span class="regexp">            return this.$store.getters.user;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .infoshow&#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line">    .row-bg&#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        height: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">    .user&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        position:relative; </span><br><span class="line">        top:<span class="number">30</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">    .user img&#123;</span><br><span class="line">        width: <span class="number">150</span>px;</span><br><span class="line">        border-radius: <span class="number">50</span>%;</span><br><span class="line">    &#125;</span><br><span class="line">    .user span&#123;</span><br><span class="line">        display: block;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-top: <span class="number">20</span>px;</span><br><span class="line">        font-size: <span class="number">20</span>px;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">    .userinfo&#123;height: 100%;background-color: #eee;&#125;</span><br><span class="line">    .user-item&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: <span class="number">30</span>%;</span><br><span class="line">        padding: <span class="number">26</span>px;</span><br><span class="line">        font-size: <span class="number">28</span>px;</span><br><span class="line">        color: #333;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>4.数据信息展示页</p><p>和infoshow页一样，作为home页的二级路由，因为都是在home页单页面展示，并不会跳转</p><p>图片展示</p><p>1.登录<img src="https://i.loli.net/2020/02/05/dz8jguCMXy6eopA.png" alt="登录"></p><p>2.注册<img src="https://i.loli.net/2020/02/05/jam2VZT1rx43MQU.png" alt="注册"></p><p>3.进入之后的首页<img src="https://i.loli.net/2020/02/05/cxjhXpI5Gz9HUFq.png" alt="首页"></p><p>4.用户信息页</p><p><img src alt="infoshow"></p><p><img src="https://i.loli.net/2020/02/05/lmONYPWZaHxGCi5.png" alt="1580911554337"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL初识</title>
      <link href="/2019/12/01/mySQL%E5%88%9D%E8%AF%86/"/>
      <url>/2019/12/01/mySQL%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>语义检查：</p><p>DDL: 数据定义检查</p><p>DCL:数据控制语言</p><p>DML:数据操作语言</p><p>DQL:数据查询语言</p><p>语句：</p><p><code>select user,host from mysql.user</code></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575208996232.png" alt="1575208996232"></p><p>新建zyw库</p><p><code>create database zyw</code></p><p>创建zyw表</p><p><code>create table zyw;</code></p><p>删除库</p><p><code>drop database zyw</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node-服务器开启</title>
      <link href="/2019/11/28/node-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF/"/>
      <url>/2019/11/28/node-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一，express开启"><a href="#一，express开启" class="headerlink" title="一，express开启"></a>一，express开启</h1><p><code>var express = require(&quot;express&quot;)</code></p><p><code>var app = express()</code></p><p><code>app.get(&#39;/&#39;,function(req,res){console.log(&quot;您进入了/链接&quot;)})</code></p><p><code>app.listen(5000,function(err){console.log(&quot;servering is on port 5000&quot;)})</code></p><p>链接出现的问题</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574918487494.png" alt="1574918487494"></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574918544028.png" alt="1574918544028"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CCSS之大坑</title>
      <link href="/2019/10/18/CCSS%E4%B9%8B%E5%A4%A7%E5%9D%91/"/>
      <url>/2019/10/18/CCSS%E4%B9%8B%E5%A4%A7%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="body-的背景"><a href="#body-的背景" class="headerlink" title="body 的背景"></a>body 的背景</h1><h1 id="基线的理解"><a href="#基线的理解" class="headerlink" title="基线的理解"></a>基线的理解</h1><p>好复杂</p><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><p>一个元素如果子元素出现行盒，该元素内部也会产生参考线。</p><p>决定参考线：font-size,font-family , line-height </p><p>vertical-align：</p><p>baseline：基线对齐</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>canvas做画板</title>
      <link href="/2019/10/16/canvas%E5%81%9A%E7%94%BB%E6%9D%BF/"/>
      <url>/2019/10/16/canvas%E5%81%9A%E7%94%BB%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>一则公开课，有助于复习canvas。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> drawingBoard = &#123;</span><br><span class="line">    cavs: <span class="built_in">document</span>.getElementById(<span class="string">'cavs'</span>),</span><br><span class="line">    ctx: <span class="built_in">document</span>.getElementById(<span class="string">'cavs'</span>).getContext(<span class="string">'2d'</span>),</span><br><span class="line">    btn_container: <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>],</span><br><span class="line">    bool: <span class="literal">false</span>,</span><br><span class="line">    colorBtn: <span class="built_in">document</span>.getElementById(<span class="string">'colorChange'</span>),</span><br><span class="line">    lineRuler: <span class="built_in">document</span>.getElementById(<span class="string">'lineRuler'</span>),</span><br><span class="line">    imgsArr: [],</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 修改了线条的一些样式（不是用户通过按钮更改的）</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.lineCap = <span class="string">'round'</span>;<span class="comment">//线条起始和结尾样式</span></span><br><span class="line">        <span class="keyword">this</span>.ctx.lineJoin = <span class="string">'round'</span>;<span class="comment">//转弯</span></span><br><span class="line">        <span class="comment">// 2.执行 drawing 事件，事件中对鼠标悬停、按下、移动、离开都绑定了事件</span></span><br><span class="line">        <span class="keyword">this</span>.drawing();</span><br><span class="line">        <span class="comment">// 3. 给所有的 按钮绑定事件</span></span><br><span class="line">        <span class="keyword">this</span>.btnsAllFn();</span><br><span class="line">    &#125;,</span><br><span class="line">    drawing: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">            cavs = <span class="keyword">this</span>.cavs,</span><br><span class="line">            <span class="comment">//  获取到 画布左上点的位置坐标</span></span><br><span class="line">            c_left = cavs.offsetLeft,</span><br><span class="line">            c_top = cavs.offsetTop;</span><br><span class="line">        <span class="comment">/* console.log(c_left, c_top); */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.cavs.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            self.bool = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//  鼠标按下的距离是相对于浏览器的，所以要捕获到在画布内的位置还需要减去 画布在浏览器的位置</span></span><br><span class="line">            <span class="comment">//  将画笔移动到该位置</span></span><br><span class="line">            <span class="keyword">var</span> c_x = e.pageX - c_left,</span><br><span class="line">                c_y = e.pageY - c_top;</span><br><span class="line">            self.ctx.beginPath();</span><br><span class="line">            self.ctx.moveTo(c_x, c_y);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每次按下 都保存到数组中，为之后的撤销操作保留数据</span></span><br><span class="line">            <span class="keyword">var</span> img = self.ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, self.cavs.offsetWidth, self.cavs.offsetHeight);</span><br><span class="line">            self.imgsArr.push(img);</span><br><span class="line">            <span class="built_in">console</span>.log(self.imgsArr);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.cavs.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (self.bool) &#123;</span><br><span class="line">                self.ctx.lineTo(e.pageX - c_left, e.pageY - c_top);</span><br><span class="line">                self.ctx.stroke();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.cavs.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            self.ctx.closePath();</span><br><span class="line">            self.bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.cavs.onmouseleave = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            self.ctx.closePath();</span><br><span class="line">            self.bool = <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    btnsAllFn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.btn_container.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (e.target.id) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'cleanBoard'</span>:</span><br><span class="line">                    <span class="comment">//清屏</span></span><br><span class="line">                    self.ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">                                       self.cavs.offsetWidth,                       self.cavs.offsetHeight);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'eraser'</span>:</span><br><span class="line">                    <span class="comment">//橡皮</span></span><br><span class="line">                    self.ctx.strokeStyle = <span class="string">'#ffffff'</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'rescind'</span>:</span><br><span class="line">                    <span class="comment">//撤销</span></span><br><span class="line">                    <span class="keyword">if</span> (self.imgsArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        self.ctx.putImageData(self.imgsArr.pop(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.colorBtn.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//颜色改变</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)</span><br><span class="line">            self.ctx.strokeStyle = <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.lineRuler.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//粗细改变</span></span><br><span class="line">            self.ctx.lineWidth = <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">drawingBoard.init();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 公开课 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器之表单样式中的妙用</title>
      <link href="/2019/10/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B9%8B%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2019/10/15/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B9%8B%E8%A1%A8%E5%8D%95%E6%A0%B7%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-样式-表单样式"><a href="#CSS-样式-表单样式" class="headerlink" title="CSS 样式+ 表单样式"></a>CSS 样式+ 表单样式</h1><p>又名：复习不常用的CSS选择器</p><p>最近沉迷于样式编写，发现不仅一些动画效果和样式切换可以完全使用CSS编写，而且通过相对单位rem，vw，vh 简单获取到设备宽高度简化了js 的使用。</p><h2 id><a href="#" class="headerlink" title="+"></a>+</h2><p><code>eleA + eleB</code> :选择 eleA 元素之后紧跟的每个 eleB元素，即 兄弟元素</p><h2 id="-1"><a href="#-1" class="headerlink" title="~"></a>~</h2><p><code>eleA ~ eleB</code> 选择器 eleA  之后出现的所有 eleB，但是 eleB不必直接紧随 eleA。即 eleB 可以是子级，也可以是子级的子级.</p><p>例子后续补充（以表单元素为例</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 补充知识</title>
      <link href="/2019/10/12/jQuery-%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/10/12/jQuery-%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>一、隐式迭代</p><p>即 如果选出一组jq对象，设置样式的话，不同 for循环可以统一设置(相同的操作)。（不完全理解仅做插眼知识点）</p><p>适用场景： 排他</p><p>例子：只有当前选中有特殊样式，切换的时候样式回复默认</p><a id="more"></a><p>二、CSS 对象形式修改样式，样式名可以不加引号，样式属性值如果是 数字的话也可以不加引号，数字之外的值必须加引号。</p><p>三、事件切换：<code>hover()</code></p><p>整合了mouseover 和mouseout，鼠标经过和鼠标离开两个事件 。</p><p>并且：如果hover中只写了一个函数，那么鼠标经过和鼠标离开都会执行这个函数。</p><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.nav&gt;li'</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).slideToggle();</span><br><span class="line">    <span class="comment">// 即鼠标经过和离开 都会进行 滑动的切换。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.nav&gt;li'</span>).hover(function()&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).stop().slideToggle();</span><br><span class="line">    <span class="comment">// 默认实惠执行动画队列里的所有动画，会有一种抽风的感觉。</span></span><br><span class="line">    <span class="comment">//加上 .stop() 即执行最近一次的动画，</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取属性：</p><p>prop() 固有属性 a 的href title</p><p>attr() 自定义属性譬如：class  id </p><p>获取input 的值</p><p><code>val()</code></p><p>表单元素修改事件：<code>change()</code></p><p>保留小数</p><p><code>toFixed(num)</code>  保留num 位小数</p><p>substr(num): 原生js方法，在字符串中抽取从 <em>start</em> 下标开始的指定数目的字符。</p><p>Jquery元素遍历（进行不同的操作）</p><p><code>$(&quot;div&quot;).each(function(index , domEle){ })</code> index是每个元素的索引号，domEle是每个DOM元素对象，不是jQuery 对象。</p><p>$.each() 和上面的一样，不过这个遍历方法更多的用来遍历数据，譬如数组、对象等。</p><p>元素位置的获取和设置</p><ol><li><p><code>offset()</code> 设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，跟 父级没有关系。 该方法有两个属性：left、top, <code>offset().top</code> 用于获取距离文档顶部的距离，<code>offset().left</code> 用于获取居里文档左侧的距离。</p><p>使用对象来一起设置 顶部和左侧的偏移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).offset(&#123;</span><br><span class="line">    top:<span class="number">10</span>,</span><br><span class="line">    left:<span class="number">10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><code>position()</code> 返回的距离带有定位父级的距离</li></ol><p>获取 滚动距离 </p><p>页面滚动事件：<code>$(window).scroll(function(){...})</code> </p><p>设置/ 获取 页面滚动距离<code>$(document).scrollTop()</code> </p><p>带有动画的返回顶部，需要操作<code>body,html</code> (只有元素才能动画，不能操作 document)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body,html'</span>).animate(&#123;</span><br><span class="line">    <span class="string">'scrollTop'</span>:<span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现 对象拷贝</p><p><code>$.extend([deep],target,object,[objectN])</code> </p><ol><li>deep 如果设置为true为深拷贝，默认为false 浅拷贝</li><li>target要拷贝的目标对象</li><li>待拷贝到第一个对象的对象 </li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>max-height</title>
      <link href="/2019/09/16/max-height/"/>
      <url>/2019/09/16/max-height/</url>
      
        <content type="html"><![CDATA[<h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><p> 今天在看的公开课，功能是实现 一个带鼠标悬停会出现旋转的二级菜单的 CSS导航栏。</p><p>出现的一个问题，是 鼠标滑过 一级菜单时 二级菜单会旋转着出现。鼠标离开二级菜单会旋转着消失（<code>transform:rotateY(0deg)</code> ) 当鼠标再次滑过二级菜单的位置时（二级已经消失），二级菜单仍然会再次出现。这不符合预期。只有滑过一级菜单，对应的二级菜单才应该出现。</p><p>解决方法：<code>max-height</code> 设为0 。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>重新学习些 <code>max-height</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas笔记</title>
      <link href="/2019/09/14/canvas%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/14/canvas%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-基础的api"><a href="#1-基础的api" class="headerlink" title="1.基础的api"></a>1.基础的api</h1><p><code>ctx.beginPath();</code> // 开始路径绘制 ，如果没有设置，接下来所有画的线条都会秉持一个样式，相当于画别的东西的时候重新拿个笔。</p><p>如果 需要绘制多条属性颜色不一样的线条，需要重新开启新路径。不然属性颜色会被覆盖。</p><p><code>ctx.moveTo(20, 20);</code> // 设置路径起点，坐标为(20,20) ，<strong>相当于落笔的坐标</strong></p><p><code>ctx.lineTo(200, 20);</code> // 绘制一条到(200,20)的轨迹，<strong>到这时线条都是看不见的。</strong></p><p><code>ctx.lineWidth = 1.0;</code> // 设置线宽 </p><p><code>ctx.strokeStyle = &#39;#CC0000&#39;;</code> // 设置线的颜色 </p><a id="more"></a><p><code>ctx.stroke();</code> // 进行线的着色，<strong>这时整条线才变得可见</strong></p><p><code>ctx.closePath();</code> //自动绘制一条当前点到起点的直线，形成一个封闭图形，省却使用一次lineto方法。 它和 <code>beginPath</code> 并不是对应的。应用：三角形自动闭合。</p><p><code>ctx.fill()</code> 填充，绘制实心圆的时候，相对应的这类图形设置样式也应该用<code>ctx.fillStyle()</code> </p><h2 id="初例："><a href="#初例：" class="headerlink" title="初例："></a>初例：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">300</span>);</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/ars07*g9.UBrnE1do.79DWy5Olz0GHujMXKIMNLe4o0!/b/dL8AAAAAAAAA&bo=0gE7AQAAAAADB8s!&rf=viewer_4" alt></p><p> 如果将上述实例中的 <code>closePath()</code>改为<code>fill()</code></p><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/6wYyWixEFnQbHbdB2f0PfuGMnuShU58lBMqUJ47TddA!/b/dL8AAAAAAAAA&bo=XAKSAQAAAAADF*8!&rf=viewer_4" alt></p><p>还有一些独特的api ，绘制一些常用的图形而不需要我们手动计算距离再  重复lineTo。</p><p>以下</p><h1 id="2-绘制矩形："><a href="#2-绘制矩形：" class="headerlink" title="2.绘制矩形："></a>2.绘制矩形：</h1><h2 id="实心矩形"><a href="#实心矩形" class="headerlink" title="实心矩形"></a>实心矩形</h2><p><code>ctx.fillRect(x,y,width,height)</code>它的四个参数分别为矩形左上角顶点的x坐标、y坐标，以及矩形的宽和高。fillStyle属性用来设置矩形的填充色。</p><p>初例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'orange'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/JaEauoThKfvc7ZA0cLAnmM7TvYBBmf6yHOO9diZCn38!/b/dLYAAAAAAAAA&bo=0QE8AQAAAAADF98!&rf=viewer_4" alt="1568255521049"></p><p>其中，左上顶点 坐标为 （50,50），矩形宽为200，高为100。</p><h2 id="空心矩形"><a href="#空心矩形" class="headerlink" title="空心矩形"></a>空心矩形</h2><p><code>ctx.strokeRect(x,y,width,height)</code></p><p>实例：</p><p><code>ctx.strokeRect(50, 50, 200, 100);</code></p><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/uL5WhlXnY7DnxcPFynhqkweY.XBeErH7JQ43eQ*dYeQ!/b/dL4AAAAAAAAA&bo=zAE3AQAAAAADF8k!&rf=viewer_4" alt="1568255652273"></p><h2 id="清除矩形区域"><a href="#清除矩形区域" class="headerlink" title="清除矩形区域"></a>清除矩形区域</h2><p><code>ctx.clearRect(x,y,width,height);</code> 可以用来制造 某种被挖空的效果图。</p><p>【实例】：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'orange'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">100</span>); </span><br><span class="line">ctx.clearRect(<span class="number">100</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/D9CP*FU1.kPKPdjT8BoajsJCbdogLytVwbTnfRUziQ0!/b/dL8AAAAAAAAA&bo=zwE3AQAAAAADF8o!&rf=viewer_4" alt="1568255818222"></p><h1 id="3-绘制文本"><a href="#3-绘制文本" class="headerlink" title="3.绘制文本"></a>3.绘制文本</h1><p><code>fillText(string, x, y)</code> 三个参数分别为文本内容、起点的x坐标、y坐标。使用之前，需用font设置字体、大小、样式（写法类似与CSS的font属性）。与此类似的还有<code>strokeText</code>方法，用来添加空心字。</p><p>【实例】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 设置字体</span></span><br><span class="line">ctx.font = <span class="string">"Bold 20px Arial"</span>; </span><br><span class="line">ctx.font = <span class="string">'微软雅黑'</span></span><br><span class="line"><span class="comment">// 设置对齐方式</span></span><br><span class="line">ctx.textAlign = <span class="string">"left"</span>;</span><br><span class="line"><span class="comment">// 设置填充颜色</span></span><br><span class="line">ctx.fillStyle = <span class="string">"#008600"</span>; </span><br><span class="line"><span class="comment">// 设置字体内容，以及在画布上的位置</span></span><br><span class="line">ctx.fillText(<span class="string">"Hello!"</span>, <span class="number">10</span>, <span class="number">50</span>); </span><br><span class="line"><span class="comment">// 绘制空心字</span></span><br><span class="line">ctx.strokeText(<span class="string">"Hello!"</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//文字的 direction     有两个属性值：rlt，ltr</span></span><br><span class="line">ctx.direction</span><br><span class="line"><span class="comment">//设置基线</span></span><br><span class="line">ctx.textBaseline</span><br><span class="line"><span class="comment">//文字的对齐方式</span></span><br><span class="line">ctx.textAlign = <span class="string">'center'</span>;<span class="comment">// 注意，文字对齐的基准点是strokeText 的时候设置的坐标。默认是start,和direction有关，如果是rtl，start 和left表现一致。如果是ltr，start个right表现一致。left 是 文字的左边靠近基准点，right 是 文字的右边靠近基准点，center 是文字的中间靠近基准点。还有个end值。</span></span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/UpebxomoyvnKc0pyS5LiiOL7rOmPezyR15auziYzjl8!/b/dL8AAAAAAAAA&bo=awIVAQAAAAADF08!&rf=viewer_4" alt="1568256011815"></p><p><strong>注意</strong>：<code>fillText</code>方法不支持文本断行，即所有文本出现在一行内。所以，如果要生成多行文本，只有调用多次<code>fillText</code>方法。</p><h1 id="4-绘制圆形-和扇形"><a href="#4-绘制圆形-和扇形" class="headerlink" title="4.绘制圆形 和扇形"></a>4.绘制圆形 和扇形</h1><p><code>arc</code>方法用来绘制扇形</p><p><code>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);</code></p><p>x和y参数是圆心坐标，radius是半径，<code>startAngle</code>和<code>endAngle</code>则是扇形的起始角度和终止角度（<strong>以弧度表示</strong>），<code>anticlockwise</code>表示做图时应该逆时针画（true）还是顺时针画（false）;</p><p>弧度计算：π  / 180</p><h2 id="实心圆"><a href="#实心圆" class="headerlink" title="实心圆"></a>实心圆</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">60</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">true</span>); </span><br><span class="line">ctx.fillStyle = <span class="string">"#000000"</span>; </span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/3ehflGSL6LSE8dQrb0550xjLRdMCOziXkZOJxntFFao!/b/dMUAAAAAAAAA&bo=YgIHAQAAAAADF1Q!&rf=viewer_4" alt="1568256513032"></p><h2 id="空心圆（圆圈）"><a href="#空心圆（圆圈）" class="headerlink" title="空心圆（圆圈）"></a>空心圆（圆圈）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(<span class="number">60</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">ctx.lineWidth = <span class="number">3</span>; <span class="comment">// 设置宽度</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"#000"</span>; <span class="comment">// 设置颜色</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/c56wkEpfL8oyIzkbcynfPjNhvtSBezK5r9Kx.R8H3Sw!/b/dMMAAAAAAAAA&bo=XgHlAAAAAAADF4g!&rf=viewer_4" alt="1568256523862"></p><h1 id="5-生成渐变色"><a href="#5-生成渐变色" class="headerlink" title="5.生成渐变色"></a>5.生成渐变色</h1><p><code>ctx.createLinearGradient(x1,y1,x2,y2)</code> 参数是(x1, y1, x2, y2)，其中x1和y1是起点坐标，x2和y2是终点坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。</p><p>通过<code>addColorStop()</code> 设置不同时间段的颜色。</p><p>可以通过<code>myGradient.addColorStop(0, color1);</code> 和<br><code>myGradient.addColorStop(1, color2);</code> 设置0和100%的样式，也可以多分几段<code>myGradient.addColorStop(0.5, color);</code></p><p>注意： 生成一个渐变色 实例，对实例进行赋值颜色，使用api <code>addColorStop</code></p><p>【生成案例】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGradient = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">160</span>); </span><br><span class="line">myGradient.addColorStop(<span class="number">0</span>, <span class="string">"#BABABA"</span>); </span><br><span class="line">myGradient.addColorStop(<span class="number">1</span>, <span class="string">"#636363"</span>);</span><br></pre></td></tr></table></figure><p>【使用】</p><p>绘制一个从上往下渐变色的矩形。</p><p>矩形还是照常画，只不过 设置颜色的时候 将生成的渐变色实例赋值过去就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGradient = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">160</span>); </span><br><span class="line">myGradient.addColorStop(<span class="number">0</span>, <span class="string">"red"</span>); </span><br><span class="line">myGradient.addColorStop(<span class="number">1</span>, <span class="string">"black"</span>);</span><br><span class="line">ctx.fillStyle = myGradient;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/eT4RQA4O8kOMEA2j6SMrgtWatw1E0pWciCqnlNJmBTA!/b/dE0BAAAAAAAA&bo=ZQKhAQAAAAADF*U!&rf=viewer_4" alt="1568256969356"></p><h1 id="7-生成阴影"><a href="#7-生成阴影" class="headerlink" title="7.生成阴影"></a>7.生成阴影</h1><p>将画笔设置为带阴影，即画什么都有阴影</p><p><code>ctx.shadowOffsetX</code> // 设置水平位移</p><p><code>ctx.shadowOffsetY</code>  // 设置垂直位移</p><p><code>ctx.shadowBlur</code>  // 设置模糊度</p><p><code>ctx.shadowColor</code> // 设置阴影颜色</p><p>【实例】</p><p>绘制一个带阴影的红色矩形</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.shadowOffsetX = <span class="number">10</span>; <span class="comment">// 设置水平位移</span></span><br><span class="line">ctx.shadowOffsetY = <span class="number">10</span>; <span class="comment">// 设置垂直位移</span></span><br><span class="line">ctx.shadowBlur = <span class="number">5</span>; <span class="comment">// 设置模糊度</span></span><br><span class="line">ctx.shadowColor = <span class="string">"rgba(0,0,0,0.5)"</span>; <span class="comment">// 设置阴影颜色</span></span><br><span class="line"></span><br><span class="line">ctx.fillStyle = <span class="string">"#CC0000"</span>; </span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">200</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V12zWOB84PDljA/nx82MxCGD2LV8H7l.u.fizPZLmUgUlIuDLg0fHlrwd4!/b/dFQBAAAAAAAA&bo=BwGVAAAAAAADF6E!&rf=viewer_4" alt="1568258056066"></p><p>之后再绘制 其他图形也会带阴影。</p><h1 id="8-图像处理"><a href="#8-图像处理" class="headerlink" title="8.图像处理"></a>8.图像处理</h1><p>Canvas API 允许将图像文件插入画布，做法是读取图片后，使用<code>drawImage</code>方法在画布内进行重绘</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'image.png'</span>;</span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 设置对应的图像对象，以及它在画布上的位置</span></span><br></pre></td></tr></table></figure><h1 id="9-读取Canvas-内容"><a href="#9-读取Canvas-内容" class="headerlink" title="9.读取Canvas 内容"></a>9.读取Canvas 内容</h1><p><code>var imageData = context.getImageData(0, 0, canvas.width, canvas.height);</code></p><p><code>imageData</code> 是一个对象，包含了每个像素的信息。</p><p>以<code>ctx.fillRect(50,50,100,100)</code> 绘制的100*100 的矩形框为例。console 输出<code>imageData</code> 结果：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568265201383.png" alt="1568265201383"></p><p>由此可见：其中包括 data，height，width ，data 是一个<strong>一维数组</strong>，该数组的值，依次是每个像素的红、绿、蓝、alpha通道值，因此该数组的长度= 图像的像素宽度* 图像的像素高度*4 ，每个值的范围在0 -255 。</p><p>这个数组不仅可读，而且可写，因此通过操作这个数组的值，就可以达到操作图像的目的。修改这个数组以后，使用<code>putImageData</code>方法将数组内容重新绘制在Canvas上。</p><p>1.获取：<code>ctx.getImageData</code></p><p>2.设置：<code>ctx.getImageData</code></p><h1 id="10-配合js制作动画"><a href="#10-配合js制作动画" class="headerlink" title="10.配合js制作动画"></a>10.配合js制作动画</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> posX = <span class="number">20</span>,</span><br><span class="line">    posY = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.fillStyle = <span class="string">"black"</span>;</span><br><span class="line">    ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">    posX += <span class="number">1</span>;</span><br><span class="line">    posY += <span class="number">0.25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ctx.beginPath();</span></span><br><span class="line">    ctx.fillStyle = <span class="string">"white"</span>;</span><br><span class="line">    ctx.arc(posX, posY, <span class="number">10</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">true</span>); </span><br><span class="line">    <span class="comment">// ctx.closePath();</span></span><br><span class="line">    ctx.fill();</span><br><span class="line">&#125;, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>gif </p>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发</title>
      <link href="/2019/09/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
      <url>/2019/09/06/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中引用的外部字体文件以及如何压缩</title>
      <link href="/2019/09/06/CSS%E4%B8%AD%E5%BC%95%E7%94%A8%E7%9A%84%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8E%8B%E7%BC%A9/"/>
      <url>/2019/09/06/CSS%E4%B8%AD%E5%BC%95%E7%94%A8%E7%9A%84%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="字体的几种格式"><a href="#字体的几种格式" class="headerlink" title="字体的几种格式"></a>字体的几种格式</h1><ul><li><code>.EOT</code>  微软创造的字体格式，只在IE6-IE8里使用，支持的浏览器：<code>internet Explorer 4.0+</code> </li><li><code>.TTF</code>或<code>.OTF</code>，支持的浏览器：<code>IE9+,Firefox3.5+,Chrome4+,Safari3+,Opera10+,iOS Mobile Safari4.2+</code></li><li><code>.SVG/SVGZ</code>，使用矢量图改进的字体格式，体积更小，适合在手机设备上使用，支持的浏览器：<code>Chrome4+/Safari3.1+/Opera10.0+/IOS MObile Safari3.2+</code> </li><li><code>.WOFF</code>  加载较快，支持的浏览器：<code>IE9.0+/FireFox3.5+/Chrome6+/Safari 3.6+/Opera11.1+</code> </li></ul><p><a href="https://www.fontke.com/tool/convfont/" target="_blank" rel="noopener">在线转换字体格式</a> </p><h1 id="引用的方式"><a href="#引用的方式" class="headerlink" title="引用的方式"></a>引用的方式</h1><ul><li><p>使用 <code>@font-face</code> 定义字体属性，包括<code>font-family</code> 定义字体名字，<code>src</code> 文字引用地址，多个地址之间使用 逗号 隔开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">      font-family: <span class="xml"><span class="tag">&lt;<span class="name">YourWebFontName</span>&gt;</span>;</span></span><br><span class="line">      src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;</span><br><span class="line">      [font-weight: &lt;weight&gt;];</span><br><span class="line">      [font-style: &lt;style&gt;];</span><br><span class="line">&#125;</span><br><span class="line">//  []包裹的是非必要属性</span><br></pre></td></tr></table></figure></li></ul><ul><li>有时候使用 两个url 导入字体文件是因为：绝大多数情况下，第一个 src 是可以去掉的，除非需要支持 IE9 下的兼容模式。在 IE9 中可以使用 IE7 和 IE8 的模式渲染页面，微软修改了在兼容模式下的 CSS 解析器，导致使用 ? 的方案失效。由于 CSS 解释器是从下往上解析的，所以在上面添加一个不带问号的 src 属性便可以解决此问题。</li></ul><h1 id="使用-字蛛压缩字体文件"><a href="#使用-字蛛压缩字体文件" class="headerlink" title="使用 字蛛压缩字体文件"></a>使用 字蛛压缩字体文件</h1><ul><li><p>安装 <code>npm install font-spider -g</code></p></li><li><p>在引用 字体文件的根目录下执行 <code>font-spider ./xx/index*.html</code> *号是针对所有html结尾的文件都进行压缩。</p><p>这样字体会被压缩，原件也会被保留。    </p><p>注意：</p><ul><li>如果文字有修改，需要再 重新压缩。（字蛛压缩原理是 挑出你用到的所有的字，没有用到的被踢出。）</li><li>.ttf 文件必须存在 才能被压缩。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css之工作笔记</title>
      <link href="/2019/09/03/css%E4%B9%8B%E7%96%91%E6%83%91/"/>
      <url>/2019/09/03/css%E4%B9%8B%E7%96%91%E6%83%91/</url>
      
        <content type="html"><![CDATA[<p>怕什么真理无穷，进一寸有一寸的欢喜。——可爱的博客er</p><ol><li><p>布局页面的时候发现 上层盒子设置阴影会被下层盒子覆盖。搜索说 可以通过设置 <code>z-index</code> 更改层级，我这里更改无效。只能<code>position:relative</code>  相对于原来位置定位，原来的占位还是存在的。但为啥就让阴影显示出来了呢。</p></li><li><p>纯文本渲染输出 需要空格隔开：<code>letter-spacing:xxpx</code> 可跟normal、inherit、具体数值（允许负值）。不用傻乎乎的用 &nbps; 去一个个插入了吧。</p><p>Tips: <code>letter-spacing</code> 妙用</p><p>设置负值可以使得文本倒序。</p></li></ol><a id="more"></a><p>3.今天遇到一个动画问题。要求鼠标滑过的时候 导航栏中的文字下方要出现滑动的线条，且线条从左进，从右出。</p><p>按照以往的思路 控制包裹文字的元素的宽度width从0到100% 就可以。但是在这里还不足够，因为是从同一个方向进和出。</p><p>在这里，需要用到 transform的属性<code>transform-origin</code>，并且因为用到了transform，就不需要<code>width</code>，可以直接控制scale缩放比。默认是 100%，初始状态是 scale(0)，鼠标hover 的时候 <code>scale(1)</code>。</p><p>相对应的。初始状态时<code>transform-origin:100% 50%</code> 结束的状态<code>transform-origin:0 50%</code>;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(0);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &gt;<span class="selector-tag">a</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(1);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p># </p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件扩——adobe xd</title>
      <link href="/2019/09/03/%E8%BD%AF%E4%BB%B6%E6%89%A9%E2%80%94%E2%80%94adobe-xd/"/>
      <url>/2019/09/03/%E8%BD%AF%E4%BB%B6%E6%89%A9%E2%80%94%E2%80%94adobe-xd/</url>
      
        <content type="html"><![CDATA[<p>工作需要 接触 Adobe XD</p><p>可以直接下载Adobe Creative CLoud 窗口化进行 Adobe 系列产品的安装。</p><a id="more"></a><h3 id="1-设置主页："><a href="#1-设置主页：" class="headerlink" title="1.设置主页："></a>1.设置主页：</h3><p>切换到原型，点击画板左侧图标变成蓝色，【首页】框 双击更换页面名字。</p><p>您的用户会通过“主页”屏幕开始在应用程序或网站中进行导航。并且，如果您在预览原型时并没有选择任何内容，预览将从“主页”屏幕开始。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568078180013.png" alt="1568078180013"></p><h3 id="2-设置过渡原型"><a href="#2-设置过渡原型" class="headerlink" title="2.设置过渡原型"></a>2.设置过渡原型</h3><p>就是点击页面跳转的意思。切换到 【原型】上，单击需要连接的对象，对象上出现带箭头的连接手柄。将鼠标悬停在手柄上，光标会变为连接器。单击并开始拖动鼠标，可以看到连接器。在目标画板或屏幕上释放鼠标。当您连接第一个元素时，该元素所在的画板将设为主画板。 </p><h3 id="3-网格编组。"><a href="#3-网格编组。" class="headerlink" title="3.网格编组。"></a>3.网格编组。</h3><p>选中多个组件时，需要对整个 网格一起操作，可以进行【网格编组】，快捷键 Ctrl+R   <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568079107002.png" alt="1568079107002"></p><p>在选中多个的同时，按下 Ctrl ，会显示 粉红色数值，显示的是对应的 上下左右的边距。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568079181099.png" alt="1568079181099"></p><h3 id="4-快捷键-Ctrl-3"><a href="#4-快捷键-Ctrl-3" class="headerlink" title="4.快捷键 Ctrl+3"></a>4.快捷键 Ctrl+3</h3><p>会让你选中的画板 放大，且居中显示</p><h3 id="5-设置页面滚动"><a href="#5-设置页面滚动" class="headerlink" title="5.设置页面滚动"></a>5.设置页面滚动</h3><p>设置页面滚动和 用户不需要拖动就能看到的内容范围。点击需要修改的画板名字，右侧会出现</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568079421937.png" alt="1568079421937"></p><p>将滚动改为 【垂直】。</p><p>同时下拉页面，增加页面高度。</p><p>通过 拉动 <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568079498525.png" alt="1568079498525">来控制 用户在进入页面的时候就能看到的内容范围。</p><h3 id="6-标题悬浮置顶"><a href="#6-标题悬浮置顶" class="headerlink" title="6.标题悬浮置顶"></a>6.标题悬浮置顶</h3><p>切换至【原型】，选中标题栏部分，将<img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568079964770.png" alt="1568079964770">选项勾选。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>响应式相关</title>
      <link href="/2019/09/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/09/02/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>简单来说：不同的设备都能适配显示内容。</p><h1 id="之前涉及到的"><a href="#之前涉及到的" class="headerlink" title="之前涉及到的"></a>之前涉及到的</h1><ul><li><p>1.移动端单位改为rem 或者 em</p></li><li><p>2.添加<code>&lt;meta name=&quot;viewport&quot;&gt;</code> 设定宽度为设备宽度，最小宽度最大宽度等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h1 id="新内容"><a href="#新内容" class="headerlink" title="新内容"></a>新内容</h1><ul><li><p>1，通过 css 控制不同设备（主要是宽度的检测）内容显示</p><p>具体： 在引入css 的时候，添加<code>media</code> 属性，通过该属性 可以设置该css样式什么时候有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例： 小于500px的时候显示 mobile移动端样式，大于500px的时候显示  pc端样式</span></span><br><span class="line"> &lt;!-- pc端 --&gt;</span><br><span class="line"> &lt;link media=<span class="string">"(min-width:500px)"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"./1test_css/desktop.css"</span>&gt;</span><br><span class="line"> &lt;!-- 手机端 --&gt;</span><br><span class="line"> &lt;link media=<span class="string">"(max-width:500px)"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"./1test_css/mobile.css"</span>&gt;</span><br></pre></td></tr></table></figure><p>即： 正常打开的时候显示的是 pc端样式。如果拉伸浏览器内可视宽度小于500px 的时候，就会使用mobile 样式。</p><p> 拓展：<code>media query</code> 为媒体查询。贴一个别人的<a href="https://www.cnblogs.com/ouyangping/p/6415266.html" target="_blank" rel="noopener">blog</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2019/08/24/ES6/"/>
      <url>/2019/08/24/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>let 和const 相同点是 ：1.不能重复声明 2.块级作用域</p><h2 id="let："><a href="#let：" class="headerlink" title="let："></a>let：</h2><p>可以被修改</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>不可以被修改。譬如一些常量 <code>Math.PI</code></p><a id="more"></a><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="参数的展开和拓展"><a href="#参数的展开和拓展" class="headerlink" title="参数的展开和拓展"></a>参数的展开和拓展</h2><h3 id="…args"><a href="#…args" class="headerlink" title="…args"></a>…args</h3><h4 id="1-剩余参数，必须是最后一个"><a href="#1-剩余参数，必须是最后一个" class="headerlink" title="1.剩余参数，必须是最后一个"></a>1.剩余参数，必须是最后一个</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);<span class="comment">// 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(args);<span class="comment">// [3,4] 在这里 ...args 即指代剩余的所有参数</span></span><br><span class="line">&#125;</span><br><span class="line">func1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="2-数组展开"><a href="#2-数组展开" class="headerlink" title="2.数组展开"></a>2.数组展开</h4><p>拆分为一个一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">...arr 就等于 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>  即将数组一个一个展开</span><br><span class="line"></span><br><span class="line"><span class="comment">// 譬如定义 输出数组中每一个值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length; i ++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用 数组展开的写法</span></span><br></pre></td></tr></table></figure><p>也可用于两个数组的合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">100</span>,<span class="number">1000</span>,<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1,...arr2];</span><br><span class="line"><span class="comment">// 输出： [1,2,3,4,100,1000,10000]</span></span><br></pre></td></tr></table></figure><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b=<span class="number">100</span>,c=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 直接在 形参后面=赋予默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模拟前后端交互的小助手-mock&amp;EasyMock</title>
      <link href="/2019/08/24/%E6%A8%A1%E6%8B%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E5%B0%8F%E5%8A%A9%E6%89%8B-mock-EasyMock/"/>
      <url>/2019/08/24/%E6%A8%A1%E6%8B%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%9A%84%E5%B0%8F%E5%8A%A9%E6%89%8B-mock-EasyMock/</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><ul><li>知识储备：什么是跨域，为什么有跨域，如何解决跨域，在原生js和vue中分别如何处理跨域。网络请求和异步操作的关系，异步和同步的区分。</li><li><a href="http://mockjs.com/" target="_blank" rel="noopener">mock</a> 是拦截Ajax 请求，生成随机数据返回</li><li><a href="https://easy-mock.com/" target="_blank" rel="noopener">EasyMock</a> 提供一个网页手动输入数据就能生成接口</li></ul><a id="more"></a><h1 id="mock-js"><a href="#mock-js" class="headerlink" title="mock.js"></a>mock.js</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-安装："><a href="#1-安装：" class="headerlink" title="1.安装："></a>1.安装：</h3><p><code>npm install mockjs</code> </p><h3 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"><span class="keyword">var</span> data = Mock.mock(&#123;</span><br><span class="line">    <span class="comment">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class="line">    <span class="string">'list|1-10'</span>: [&#123;</span><br><span class="line">        <span class="comment">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class="line">        <span class="string">'id|+1'</span>: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h3 id="3-语法规范"><a href="#3-语法规范" class="headerlink" title="3.语法规范"></a>3.语法规范</h3><p>mockjs 是通过特殊的语法规范 随机生成数据，用户可以自定义数据模板。</p><p><strong>数据模板中的每个属性由 3 部分构成：属性名、生成规则、属性值：</strong></p><p><code>&#39;name|rule&#39;: value</code></p><p><strong>注意：</strong></p><ul><li><em>属性名</em> 和 <em>生成规则</em> 之间用竖线 <code>|</code> 分隔。</li><li><em>生成规则</em> 是可选的。</li></ul><h4 id="1-属性名"><a href="#1-属性名" class="headerlink" title="1.属性名"></a>1.属性名</h4><h4 id="2-生成规则"><a href="#2-生成规则" class="headerlink" title="2.生成规则"></a>2.生成规则</h4><p>生成规则有 7 种格式：</p><ol><li><code>&#39;name|min-max&#39;: value</code></li><li><code>&#39;name|count&#39;: value</code></li><li><code>&#39;name|min-max.dmin-dmax&#39;: value</code></li><li><code>&#39;name|min-max.dcount&#39;: value</code></li><li><code>&#39;name|count.dmin-dmax&#39;: value</code></li><li><code>&#39;name|count.dcount&#39;: value</code></li><li><code>&#39;name|+step&#39;: value</code></li></ol><ul><li><strong>生成规则 的 含义 需要依赖 属性值的类型 才能确定。</strong></li><li><em>属性值</em> 中可以含有 <code>@占位符</code>。</li><li><em>属性值</em> 还指定了最终值的初始值和类型。</li></ul><h4 id="3-属性值"><a href="#3-属性值" class="headerlink" title="3.属性值"></a>3.属性值</h4><h5 id="1-字符串-String"><a href="#1-字符串-String" class="headerlink" title="1. 字符串 String"></a>1. 字符串 <strong>String</strong></h5><ol><li><p><code>&#39;name|min-max&#39;: string</code></p><p>通过重复 <code>string</code> 生成一个字符串，重复次数大于等于 <code>min</code>，小于等于 <code>max</code>。</p></li><li><p><code>&#39;name|count&#39;: string</code></p><p>通过重复 <code>string</code> 生成一个字符串，重复次数等于 <code>count</code>。</p></li></ol><h5 id="2-数字-Number"><a href="#2-数字-Number" class="headerlink" title="2. 数字 Number"></a>2. 数字 <strong>Number</strong></h5><ol><li><p><code>&#39;name|+1&#39;: number</code></p><p>属性值自动加 1，初始值为 <code>number</code>。</p></li><li><p><code>&#39;name|min-max&#39;: number</code></p><p>生成一个大于等于 <code>min</code>、小于等于 <code>max</code> 的整数，属性值 <code>number</code> 只是用来确定类型。</p></li><li><p><code>&#39;name|min-max.dmin-dmax&#39;: number</code></p><p>生成一个浮点数，整数部分大于等于 <code>min</code>、小于等于 <code>max</code>，小数部分保留 <code>dmin</code> 到 <code>dmax</code> 位。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(&#123;</span><br><span class="line">    &apos;number1|1-100.1-10&apos;: 1,</span><br><span class="line">    &apos;number2|123.1-10&apos;: 1,</span><br><span class="line">    &apos;number3|123.3&apos;: 1,</span><br><span class="line">    &apos;number4|123.10&apos;: 1.123</span><br><span class="line">&#125;)</span><br><span class="line">// =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;number1&quot;: 12.92,</span><br><span class="line">    &quot;number2&quot;: 123.51,</span><br><span class="line">    &quot;number3&quot;: 123.777,</span><br><span class="line">    &quot;number4&quot;: 123.1231091814</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-布尔型-Boolean"><a href="#3-布尔型-Boolean" class="headerlink" title="3. 布尔型 Boolean"></a>3. 布尔型 <strong>Boolean</strong></h5><ol><li><p><code>&#39;name|1&#39;: boolean</code></p><p>随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率同样是 1/2。</p></li><li><p><code>&#39;name|min-max&#39;: value</code></p><p>随机生成一个布尔值，值为 <code>value</code> 的概率是 <code>min / (min + max)</code>，值为 <code>!value</code> 的概率是 <code>max / (min + max)</code>。</p></li></ol><h5 id="4-对象-Object"><a href="#4-对象-Object" class="headerlink" title="4. 对象 Object"></a>4. 对象 <strong>Object</strong></h5><ol><li><p><code>&#39;name|count&#39;: object</code></p><p>从属性值 <code>object</code> 中随机选取 <code>count</code> 个属性。</p></li><li><p><code>&#39;name|min-max&#39;: object</code></p><p>从属性值 <code>object</code> 中随机选取 <code>min</code> 到 <code>max</code> 个属性。</p></li></ol><h5 id="5-数组-Array"><a href="#5-数组-Array" class="headerlink" title="5. 数组 Array"></a>5. 数组 <strong>Array</strong></h5><ol><li><p><code>&#39;name|1&#39;: array</code></p><p>从属性值 <code>array</code> 中随机选取 1 个元素，作为最终值。</p></li><li><p><code>&#39;name|+1&#39;: array</code></p><p>从属性值 <code>array</code> 中顺序选取 1 个元素，作为最终值。</p></li><li><p><code>&#39;name|min-max&#39;: array</code></p><p>通过重复属性值 <code>array</code> 生成一个新数组，重复次数大于等于 <code>min</code>，小于等于 <code>max</code>。</p></li><li><p><code>&#39;name|count&#39;: array</code></p><p>通过重复属性值 <code>array</code> 生成一个新数组，重复次数为 <code>count</code>。</p></li></ol><h5 id="6-函数-Function"><a href="#6-函数-Function" class="headerlink" title="6. 函数 Function"></a>6. 函数 <strong>Function</strong></h5><ol><li><p><code>&#39;name&#39;: function</code></p><p>执行函数 <code>function</code>，取其返回值作为最终的属性值，函数的上下文为属性 <code>&#39;name&#39;</code> 所在的对象。</p></li></ol><h5 id="7-正则表达式-RegExp"><a href="#7-正则表达式-RegExp" class="headerlink" title="7. 正则表达式 RegExp"></a>7. 正则表达式 <strong>RegExp</strong></h5><h2 id="EasyMock"><a href="#EasyMock" class="headerlink" title="EasyMock"></a>EasyMock</h2><p>相比mockjs，EasyMock就是傻瓜式操作。打开官网即可-。-</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>致-所有的组件库们</title>
      <link href="/2019/08/23/%E8%87%B4-%E6%89%80%E6%9C%89%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BB%AC/"/>
      <url>/2019/08/23/%E8%87%B4-%E6%89%80%E6%9C%89%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BB%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="MUI"><a href="#MUI" class="headerlink" title="MUI"></a>MUI</h1><p><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">官网</a> </p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1566538557061.png" alt="1566538557061"></p><p>优点： 有底部tabbar、常用icon。</p><p>缺点：是要下载复制到对应文件夹使用的，css样式和js需要手动导入。</p><a id="more"></a><h1 id="mint-ui"><a href="#mint-ui" class="headerlink" title="mint-ui"></a>mint-ui</h1><p><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">官网</a> </p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1566538694268.png" alt="1566538694268"></p><p>优点：偏 移动端，譬如Toast 弹窗提示使用居多，messageBox提示框、选项卡、顶部Header、底部Tabbar、导航栏navbar</p><h1 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h1><p><a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">官网</a> </p><h1 id="vux"><a href="#vux" class="headerlink" title="vux"></a>vux</h1><p><a href="https://vux.li/" target="_blank" rel="noopener">一个凑合的 Vue.js 移动端 UI 组件库</a></p><p>目前所知是 不能在vue-cli中使用的</p><h1 id="swiper-移动端触摸滑动组件"><a href="#swiper-移动端触摸滑动组件" class="headerlink" title="swiper 移动端触摸滑动组件"></a>swiper 移动端触摸滑动组件</h1><p>使用</p><p><code>npm i --save swiper</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scroll = <span class="keyword">new</span> BScroll(<span class="string">'.cat-wrapper'</span>,&#123;</span><br><span class="line">    click: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用必须条件：</p><p>内容物由 content 包裹，且长度/宽度 必须大于最外层wrapper。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS记账簿</title>
      <link href="/2019/08/21/CSS%E8%AE%B0%E8%B4%A6%E7%B0%BF/"/>
      <url>/2019/08/21/CSS%E8%AE%B0%E8%B4%A6%E7%B0%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h1><ul><li>层叠性：处理冲突的时候，后面的会覆盖前面的</li><li>继承性：子标签继承父标签的属性，譬如字体颜色，大小，</li><li>优先级：选择器的权重计算</li></ul><h1 id="CSS-属性选择器"><a href="#CSS-属性选择器" class="headerlink" title="CSS 属性选择器"></a>CSS 属性选择器</h1><ul><li><p><code>~</code>  相同父元素下 所有目标元素</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">为所有相同的父元素中位于 <span class="selector-tag">p</span> 元素之后的所有 <span class="selector-tag">ul</span> 元素设置背景：</span><br><span class="line"><span class="selector-tag">p</span>~<span class="selector-tag">ul</span>&#123;</span><br><span class="line"></span><br><span class="line">　　<span class="attribute">background</span>:<span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>+</code> 紧跟的同类元素</p></li></ul><h1 id="css样式选择器"><a href="#css样式选择器" class="headerlink" title="css样式选择器"></a>css样式选择器</h1><a id="more"></a><h2 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1.属性选择器"></a>1.属性选择器</h2><p><code>div[attr]</code>: 选出所有带有attr属性的div</p><p><code>div[attr=attr1]</code>:选出 属性<code>attr</code>为<code>attr1</code>值的<code>div</code></p><p><code>div[class=’class1’]</code>:选出<code>class</code>名为<code>class1</code>的<code>div</code>（完全等于）</p><p><code>div[class^=’class1’]</code>:选出<code>class</code>类名为<code>class1</code>开头的div</p><p><code>div[class$=’class1’]:</code>选出class名为<code>class1</code>结尾的div</p><p><code>div[class*=’class1’]</code>:选出class名包含有 class1的div（任意位置都可以）</p><h2 id="2-伪元素选择器"><a href="#2-伪元素选择器" class="headerlink" title="2.伪元素选择器"></a>2.伪元素选择器</h2><p>::first-letter:选择第一个字</p><p>::first-line:选出第一行</p><p>::selection:改变选中文字的样式（默认的是蓝色白底）</p><p>::before</p><p>::after</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>background-color: pink;</p><p>background-image: url()</p><p>background-repeat: no-repeat;// 是否重复</p><p>background-position: 50% 50%; // 背景开始位置</p><p>background-origin： padding-box|border-box|content-box //属性规定背景图片的定位区域。</p><p>background-attachment:背景附着（fixed/scroll）拉动滚动轴时是否跟着移动</p><p>background:合并写法</p><p>background:rgba()</p><p>background-size:百分比/ cover（自动调整缩放比例，保证图片始终填充满背景区域，如有溢出则被隐藏）/ contain（自动调整缩放比例，保证图片始终完整显示在区域内）</p><p>注意：多背景图片，逗号隔开；如果要设置背景颜色，要把颜色设置在最后一组背景图片上，不然会不现实</p><h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><h2 id="一、含义："><a href="#一、含义：" class="headerlink" title="一、含义："></a><strong>一、含义：</strong></h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.box&#123; display: flex;&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.box&#123; display: inline-flex;&#125;</span><br></pre></td></tr></table></figure><p> <strong>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</strong></p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”<strong>容器</strong>“。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”<strong>项目</strong>“。</p><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml6988%5Cwps1.jpg" alt="img"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><h3 id="1-容器的概念"><a href="#1-容器的概念" class="headerlink" title="1.容器的概念"></a>1.容器的概念</h3><ul><li><p>lex-direction：决定主轴的方向（即项目的排列方向）</p></li><li><p>flex-wrap：默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行</p></li><li><p>flex-flow：flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap</p></li><li><p>justify-content：项目在主轴上的对齐方式</p></li><li><p>align-items：项目在交叉轴上如何对齐。</p></li><li><p>align-content：多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</p></li></ul><h3 id="2-项目的属性"><a href="#2-项目的属性" class="headerlink" title="2.项目的属性"></a>2.项目的属性</h3><ul><li><p>order：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p></li><li><p>flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p></li><li><p>flex-shrink：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p></li><li><p>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p></li><li><p>flex：flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p></li><li><p>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></li></ul><h1 id="清除BFC"><a href="#清除BFC" class="headerlink" title="清除BFC"></a>清除BFC</h1><h2 id="BFC定义"><a href="#BFC定义" class="headerlink" title="BFC定义"></a>BFC定义</h2><p>浮动的特性导致浮动元素不再占用源文档流的位置，导致对后续元素的排版造成影响。</p><p>或者子集如果设置浮动属性导致脱离文档流父级高度为0的情况。</p><h2 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h2><h1 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h1><p>1.给父元素加 1px的边框 or 内边距<code>padding</code></p><p>2.添加 <code>overflow：hidden</code> （触发BFC）</p><h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><p>（之前接触的比较零散，这里规整一下）</p><h2 id="新增的属性选择器："><a href="#新增的属性选择器：" class="headerlink" title="新增的属性选择器："></a>新增的属性选择器：</h2><table><thead><tr><th>规则</th><th>说明</th></tr></thead><tbody><tr><td>E[attr]</td><td>表示存在sttr属性即可</td></tr><tr><td>E[attr=val]</td><td>表示属性值完全等于val</td></tr><tr><td>E[attr*=val]</td><td>表示属性值包含val字符并且在<strong>任意</strong>位置</td></tr><tr><td>E[attr^=val]</td><td>表示属性值包含val字符并且在<strong>开始</strong>位置</td></tr><tr><td>E[attr$=val]</td><td>表示属性值包含val字符并且在<strong>结束</strong>位置</td></tr><tr><td>E:first-child</td><td>相同父元素下 第一个E子元素</td></tr><tr><td>E:last-child</td><td>最后一个子元素</td></tr><tr><td>E:nth-child(n)</td><td>第n个子元素（n从  1开始</td></tr><tr><td>E:nth-last-child(n)</td><td>与 E:nth-child(n) 相同，只是是倒着计算</td></tr><tr><td>E:nth-child(2n+0)</td><td>需要满足 y = 2n+0 序列号 的元素</td></tr></tbody></table><h2 id="目标伪类"><a href="#目标伪类" class="headerlink" title="目标伪类"></a>目标伪类</h2><p><code>E:target</code> 结合 锚点使用，处于当前锚点的    元素会被选中。</p><p>锚点有属性 href=“#text1”，点击锚点对应的text 会被增添上样式。 </p><p>应用：</p><h2 id="伪元素选择器："><a href="#伪元素选择器：" class="headerlink" title="伪元素选择器："></a>伪元素选择器：</h2><p><code>E:first-letter</code>：文本的第一个单词或字</p><p><code>E::first-line</code>：文本第一行</p><p><code>E::selection</code> 可改变选中文本的样式（鼠标左键按下选中时候的样式</p><h2 id="颜色表达方式"><a href="#颜色表达方式" class="headerlink" title="颜色表达方式"></a>颜色表达方式</h2><ul><li>直接英文名</li><li>rgb()</li><li>rgba()</li></ul><h1 id="文本元素转换"><a href="#文本元素转换" class="headerlink" title="文本元素转换"></a>文本元素转换</h1><p><code>text-transform</code>:改变文本的大小写</p><p><code>text-transform: capitalize(每个单词首字母大写)|uppercase（全部大写）|lowercase（全部小写）|inherit(IE 不支持)</code></p><h1 id="CSS属性兼容自动补齐"><a href="#CSS属性兼容自动补齐" class="headerlink" title="CSS属性兼容自动补齐"></a>CSS属性兼容自动补齐</h1><ul><li><p>全局安装 Autoprefixer</p><p><code>npm install -g autoprefixer</code></p></li><li><p>visual studio code 中安装插件<code>Autoprefixer</code></p></li></ul><h1 id="CSS复位"><a href="#CSS复位" class="headerlink" title="CSS复位"></a>CSS复位</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">margin:<span class="number">0</span>;</span><br><span class="line">padding:<span class="number">0</span>;</span><br><span class="line">box-sizing:border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后如果要继承 <code>box-sizing:border-box;</code> 后续代码则不需要添加。</p><h1 id="使用vw定制rem自适应布局"><a href="#使用vw定制rem自适应布局" class="headerlink" title="使用vw定制rem自适应布局(*)"></a>使用vw定制rem自适应布局(*)</h1><p>前景知识： 通过JS设置不同屏幕宽高比的 <code>font-size</code>，rem基于根元素<code>font-size</code>设置页面的字体大小，做到自适应。</p><p>现在：结合 vw 单位 和<code>calc()</code>  </p><h1 id="排版竖行文字"><a href="#排版竖行文字" class="headerlink" title="排版竖行文字"></a>排版竖行文字</h1><p><code>writing-mode:horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</code> </p><p><code>horizontal-tb</code>  正常的横向书写</p><p><code>vertical-rl</code> 竖写，并且从右往左</p><p><code>vertical-lr</code> 竖写，并且从左到右</p><p><code>sideways-rl</code>  内容垂直方向从上到下排列</p><p><code>sideways-lr</code> 内容垂直方向从下到上排列</p><h1 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h1><h2 id="1-text-align"><a href="#1-text-align" class="headerlink" title="1.text-align"></a>1.text-align</h2><p>设置文本样式，</p><p><code>text-align-last:justify</code> ，适用于 未知字数中文两端对齐</p><p><code>text-align:center</code>，文字居中，在input 输入框也可以通过</p><p>这个设置光标居中</p><h2 id="2-line-height"><a href="#2-line-height" class="headerlink" title="2.line-height"></a>2.line-height</h2><p>行高，</p><p>可以设置好为 数值 <code>line-height:2</code> 即为两倍字体大小</p><p>像素值：<code>line-height:10px</code></p><h1 id="文本溢出隐藏并显示省略号"><a href="#文本溢出隐藏并显示省略号" class="headerlink" title="文本溢出隐藏并显示省略号"></a>文本溢出隐藏并显示省略号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有一行文本的时候</span></span><br><span class="line">overflow:hidden; <span class="comment">//超出的文本隐藏</span></span><br><span class="line">text-overflow:ellipsis; <span class="comment">//溢出用省略号显示</span></span><br><span class="line">white-space:nowrap; <span class="comment">//溢出不换行</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多行文本</span></span><br><span class="line">overflow:hidden; </span><br><span class="line">text-overflow:ellipsis; </span><br><span class="line">display:-webkit-box; </span><br><span class="line">-webkit-box-orient:vertical;</span><br><span class="line">-webkit-line-clamp:<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="文本之间空隙"><a href="#文本之间空隙" class="headerlink" title="文本之间空隙"></a>文本之间空隙</h1><p><code>letter-spacing</code> 设置具体px可以将文字间隔开。</p><p>妙用：设置负值，文本将倒序。</p><p>恭喜发财 变成 财发喜恭</p><h1 id="左重右轻（只在flex）"><a href="#左重右轻（只在flex）" class="headerlink" title="左重右轻（只在flex）"></a>左重右轻（只在flex）</h1><p>横向flex 布局时，最后一个加上<code>margin-left=auto</code> 可以实现最后一个图标向右对齐。</p><p>效果</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567753062412.png" alt="1567753062412"></p><h1 id="attr抓取data"><a href="#attr抓取data" class="headerlink" title="attr抓取data-*"></a>attr抓取data-*</h1><p>一直以为attr 属性值只能在 js中通过api 获取。</p><p>css 中能直接通过 <code>attr(data-xx)</code> 获取到 用户自定义属性 <code>data-xx</code> 的值。在CSS中 同时使用 <code>content</code> 和<code>attr</code> 就能直接赋值。</p><h1 id="简单的表单验证"><a href="#简单的表单验证" class="headerlink" title="简单的表单验证"></a>简单的表单验证</h1><p>用到的 知识点：伪元素   <code>:valid</code>  和  <code>:invalid</code> 和 <code>pattern</code></p><p> <code>:valid</code>   选择器在表单元素的值需要根据指定条件验证时设置指定样式</p><p>​            注意：只作用于能指定区间值的元素，例如 input 元素中的 min 和 max 属性，及正确的 email 字段, 合法的数字字段等。</p><p> <code>:invalid</code> 相对的就是不符合指定条件时的样式 </p><p> <code>pattern</code> 即 指定样式， 使用正则表达式、</p><h1 id="focus-within"><a href="#focus-within" class="headerlink" title=":focus-within"></a>:focus-within</h1><p>当元素本身或其后代获得焦点时，<code>:focus-within</code>伪类的元素就会有效。</p><p>应用：button 获取被点击时切换颜色</p><h1 id="禁止右键操作"><a href="#禁止右键操作" class="headerlink" title="禁止右键操作"></a>禁止右键操作</h1><p>整个页面禁止右键，在body上添加</p><p><code>oncontextmenu=self.event.returnValue=false onselect=&quot;return false&quot;</code></p><h3 id="禁止鼠标右键保存图片"><a href="#禁止鼠标右键保存图片" class="headerlink" title="禁止鼠标右键保存图片"></a>禁止鼠标右键保存图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;logo.png&quot; width=&quot;150&quot; height=&quot;150&quot; oncontextmenu=&quot;return false;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="禁止鼠标拖动图片"><a href="#禁止鼠标拖动图片" class="headerlink" title="禁止鼠标拖动图片"></a>禁止鼠标拖动图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;logo.png&quot; width=&quot;150&quot; height=&quot;150&quot; ondragstart=&quot;return false;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="文字禁止鼠标选中"><a href="#文字禁止鼠标选中" class="headerlink" title="文字禁止鼠标选中"></a>文字禁止鼠标选中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onselectstart=&quot;return false;&quot;&gt;文字禁止鼠标选中&lt;/p&gt;</span><br><span class="line">&lt;p&gt;普通文字可以选中&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="禁止复制文本"><a href="#禁止复制文本" class="headerlink" title="禁止复制文本"></a>禁止复制文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p onselect=&quot;document.selection.empty();&quot;&gt;禁止复制文本&lt;/p&gt;</span><br><span class="line">&lt;p&gt;普通文字可以复制&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="移动端尺寸基础知识"><a href="#移动端尺寸基础知识" class="headerlink" title="移动端尺寸基础知识"></a>移动端尺寸基础知识</h1><p><a href="https://www.cnblogs.com/chris-oil/p/5367106.html" target="_blank" rel="noopener">参考</a></p><p>安卓手机 ：360 *640 </p><p>iphone：主流：iphone6 ：375*667</p><p>移动端开发的屏幕、图像、<a href="https://juejin.im/post/5d70747cf265da03e16897c8" target="_blank" rel="noopener">字体与布局的兼容适配</a></p><h1 id="querySelector方法"><a href="#querySelector方法" class="headerlink" title="querySelector方法"></a>querySelector方法</h1><p>方法返回文档中匹配指定 CSS 选择器的一个元素。仅返回匹配指定选择器的第一个元素。如果你需要返回所有的元素，请使用 <code>querySelectorAll()</code> 方法替代。</p><p><code>querySelector</code> 接受的是一个CSS选择符、包括 class类名，id名，标签名， 后代选择器也可以用</p><p>注意：</p><ul><li>接收的css选择符必须严格按照CSS选择符规范，类和ID均不能以数字开头。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">querySelector(<span class="string">'.btn'</span>)</span><br><span class="line">querySelector(<span class="string">'.wrap .con'</span>)</span><br><span class="line">querySelector(<span class="string">'#btn'</span>)</span><br><span class="line">querySelector(<span class="string">'button'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>querySelector</code> 返回的是 <code>Static Node List</code> ，相比较于<code>getelementById</code> 获取的是实时的、动态的。</li></ul><h1 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h1><p>控制文本的大小写。</p><p>属性值为：</p><p><code>capitalize</code>    文本中的每个单词以大写字母开头。<br><code>uppercase</code>    定义仅有大写字母。<br><code>lowercase</code>    定义无大写字母，仅有小写字母。</p><h1 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h1><p>利用坐标 绘制多边形，绘制方向是 顺时针，然后根据直线连起来。</p><p>使用方法有两种 ：</p><h2 id="1）-CSS"><a href="#1）-CSS" class="headerlink" title="1） CSS"></a>1） CSS</h2><ul><li><p>基础多边形：<code>.element { clip-path: ploygon(x1 y1, x2 y2, x3 y3, ...) }</code></p></li><li><p>圆形</p><p><code>.element { clip-path: circle(r at x y) };</code></p><p>r是圆的大小，x y 分别为愿新的坐标，可以用百分比</p></li><li><p>椭圆</p><p><code>.element { clip-path: ellipse(w h at x y) };</code>    </p><p>r是圆的大小，h 为垂直高度，x y 为椭圆的圆心。</p></li><li><p>矩形</p><p><code>.element { clip-path: inset(x y z p) };</code></p><p>为离top的距离 y为right的距离 z为bottom的距离 p为left的距离。跟多边形一样也是顺时针，跟多边形不同的是多边形是用边来使用的</p></li></ul><h2 id="2）-SVG"><a href="#2）-SVG" class="headerlink" title="2） SVG"></a>2） SVG</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123; <span class="attribute">clip-path</span>: <span class="built_in">url</span>(<span class="string">"选择器"</span>)&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/9890792dbc8b" target="_blank" rel="noopener">详细的</a></p><h1 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h1><p>语法：<code>box-shadow: 水平阴影的位置  垂直阴影的位置 模糊距离 阴影的大小 阴影颜色 内侧/外侧阴影</code></p><p>阴影叠加： 第一个是权重最高的。</p><p>阴影的颜色： 继承父集的color</p><h1 id="clip"><a href="#clip" class="headerlink" title="clip"></a>clip</h1><p>剪裁<strong>绝对定位</strong>元素。clip 允许您规定一个元素的可见尺寸，这样此元素就会被修剪并显示为这个形状。</p><p>语法：<code>clip:rect(top,right,bottom,left)</code></p><p>参数含义：</p><p><code>top</code>：矩形上长对应父元素上长的距离(上长就是矩形上边的长)<br><code>right</code>： 矩形右宽对应父元素左宽的距离(右宽就是矩形右边的宽)<br><code>bottom</code>: 矩形下长对应父元素上长的距离<br><code>left</code>： 矩形左宽对应父元素左宽的距离</p><p><a href>clip 和clip-path 有什么区别</a></p><p>clip 只能裁剪正方形，必须要绝对定位。</p><p>clip-path 对元素的定位没有要去，可以裁剪更多形状。</p><h1 id="not"><a href="#not" class="headerlink" title=":not()"></a>:not()</h1><p>CSS 否定伪类，:not(X)，是以一个简单的以选择器X为参数的功能性标记函数。它匹配不符合参数选择器X描述的元素。X不能包含另外一个否定选择器。</p><p>:not伪类的优先级即为它参数选择器的优先级。:not伪类不像其它伪类，它不会增加选择器的优先级。</p><p><strong>参数</strong>：<code>:not()</code> 伪类可以将一个或多个以逗号分隔的选择器作为其参数。选择器中不得包含另一个否定选择符或伪元素。</p><p><strong>应用</strong>：商品列表中 当用户鼠标悬浮某一商品的时候，其他的同类商品都 模糊或者暗淡，突出当前用户选中的。</p><p>【例子】：</p><p>html结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当 wrapper 有hover的时候 子集 box 没有被hover 的时候，即除了hover之外的*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:hover)</span>  &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(3px);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤filter"><a href="#过滤filter" class="headerlink" title="过滤filter()"></a>过滤filter()</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/cssref/css3-pr-filter.html" target="_blank" rel="noopener">未应用</a></p><h1 id="CSS复位-1"><a href="#CSS复位-1" class="headerlink" title="CSS复位"></a>CSS复位</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">margin:<span class="number">0</span>;</span><br><span class="line">padding:<span class="number">0</span>;</span><br><span class="line">box-sizing:border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后如果要继承 <code>box-sizing:border-box;</code> 后续代码则不需要添加。</p><h1 id="使用vw定制rem自适应布局-1"><a href="#使用vw定制rem自适应布局-1" class="headerlink" title="使用vw定制rem自适应布局(*)"></a>使用vw定制rem自适应布局(*)</h1><p>前景知识： 通过JS设置不同屏幕宽高比的 <code>font-size</code>，rem基于根元素<code>font-size</code>设置页面的字体大小，做到自适应。</p><p>现在：结合 vw 单位 和<code>calc()</code>  </p><h1 id="排版竖行文字-1"><a href="#排版竖行文字-1" class="headerlink" title="排版竖行文字"></a>排版竖行文字</h1><p><code>writing-mode:horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</code> </p><p><code>horizontal-tb</code>  正常的横向书写</p><p><code>vertical-rl</code> 竖写，并且从右往左</p><p><code>vertical-lr</code> 竖写，并且从左到右</p><p><code>sideways-rl</code>  内容垂直方向从上到下排列</p><p><code>sideways-lr</code> 内容垂直方向从下到上排列</p><h1 id="居中两端对齐"><a href="#居中两端对齐" class="headerlink" title="居中两端对齐"></a>居中两端对齐</h1><p><code>text-align-last:justify</code> ，适用于 未知字数中文两端对齐</p><h1 id="文本溢出隐藏并显示省略号-1"><a href="#文本溢出隐藏并显示省略号-1" class="headerlink" title="文本溢出隐藏并显示省略号"></a>文本溢出隐藏并显示省略号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有一行文本的时候</span></span><br><span class="line">overflow:hidden; <span class="comment">//超出的文本隐藏</span></span><br><span class="line">text-overflow:ellipsis; <span class="comment">//溢出用省略号显示</span></span><br><span class="line">white-space:nowrap; <span class="comment">//溢出不换行</span></span><br></pre></td></tr></table></figure><h1 id="文本之间空隙-1"><a href="#文本之间空隙-1" class="headerlink" title="文本之间空隙"></a>文本之间空隙</h1><p><code>letter-spacing</code> 设置具体px可以将文字间隔开。</p><p>妙用：设置负值，文本将倒序。</p><p>恭喜发财 变成 财发喜恭</p><h1 id="左重右轻（只在flex）-1"><a href="#左重右轻（只在flex）-1" class="headerlink" title="左重右轻（只在flex）"></a>左重右轻（只在flex）</h1><p>横向flex 布局时，最后一个加上<code>margin-left=auto</code> 可以实现最后一个图标向右对齐。</p><p>效果</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1567753062412.png" alt="1567753062412"></p><h1 id="attr抓取data-搭配content"><a href="#attr抓取data-搭配content" class="headerlink" title="attr抓取data-*(搭配content )"></a>attr抓取data-*(搭配content )</h1><p>一直以为attr 属性值只能在 js中通过api 获取。</p><p>content 属性与 :before 及 :after 伪元素配合使用，来插入生成内容。</p><p>css 中能直接通过 <code>attr(data-xx)</code> 获取到 用户自定义属性 <code>data-xx</code> 的值。在CSS中 同时使用 <code>content</code> 和<code>attr</code> 就能直接赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button::after &#123;</span><br><span class="line">    content: attr(data-num);</span><br><span class="line">&#125;</span><br><span class="line">&lt;button data-num=<span class="string">"123"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568086838980.png" alt="1568086838980"></p><p><strong>Tip:</strong> 只能赋值给 伪元素<code>::after</code> 或者 <code>::before</code></p><h1 id="简单的表单验证-1"><a href="#简单的表单验证-1" class="headerlink" title="简单的表单验证"></a>简单的表单验证</h1><p>用到的 知识点：伪元素   <code>:valid</code>  和  <code>:invalid</code> 和 <code>pattern</code></p><p> <code>:valid</code>   选择器在表单元素的值需要根据指定条件验证时设置指定样式</p><p>​            注意：只作用于能指定区间值的元素，例如 input 元素中的 min 和 max 属性，及正确的 email 字段, 合法的数字字段等。</p><p> <code>:invalid</code> 相对的就是不符合指定条件时的样式 </p><p> <code>pattern</code> 即 指定样式， 使用正则表达式、</p><h1 id="focus-within-1"><a href="#focus-within-1" class="headerlink" title=":focus-within"></a>:focus-within</h1><p>新的CSS伪类</p><p>当元素本身或<strong>其后代</strong>获得焦点时，<code>:focus-within</code>伪类的元素就会有效。</p><p>应用：button 获取被点击时切换颜色</p><h1 id="filter（滤镜）属性"><a href="#filter（滤镜）属性" class="headerlink" title="filter（滤镜）属性"></a>filter（滤镜）属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: none | blur() | brightness() | contrast() | drop-shadow() | grayscale() | hue-rotate() | invert() | opacity() | saturate() | sepia() | url();</span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><h1 id="valid-和-invalid校验表单"><a href="#valid-和-invalid校验表单" class="headerlink" title=":valid  和:invalid校验表单"></a>:valid  和:invalid校验表单</h1><p>需要搭配 <code>pattern</code> 使用，写在input 标签上</p><h1 id="单边框（box-shadow）"><a href="#单边框（box-shadow）" class="headerlink" title="单边框（box-shadow）"></a>单边框（box-shadow）</h1><p>1.左侧内置单边框</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1568092442485.png" alt="1568092442485"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow:inset <span class="number">5</span>px <span class="number">0</span> <span class="number">0</span> green;</span><br></pre></td></tr></table></figure><h1 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-clip: border-box|padding-box|content-box|text;</span><br></pre></td></tr></table></figure><h1 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h1><p><code>box-shadow</code> 属性值包含：X偏移，Y偏移，阴影模糊半径，阴影扩散半径，和阴影颜色并以多个逗号分隔。由逗号分隔的列表来描述一个或多个阴影效果。该属性可以让几乎所有元素的边框产生阴影。如果元素同时设置了 <code>border-radius</code>，阴影也会有圆角效果。</p><p><code>box-shadow:offsetX offsetY blur-radius spread-radius color</code></p><h2 id="xy偏移量"><a href="#xy偏移量" class="headerlink" title="xy偏移量"></a>xy偏移量</h2><p>x 和y 偏移量都= 0 ，那么阴影位于元素后面。这时如果设置了<code>&lt;blur-radius&gt;</code> 或<code>&lt;spread-radius&gt;</code> 则有模糊效果</p><p><code>box-shadow: 0 0 10px 0 grey;</code></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570283450517.png" alt="1570283450517"></p><p>增加了 <code>inset</code> </p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570283480457.png" alt="1570283480457"></p><h2 id="模糊半径"><a href="#模糊半径" class="headerlink" title="模糊半径"></a>模糊半径</h2><p>模糊半径<code>blur-radius</code>  不能为负值。值越大，阴影越淡。</p><p>扩散半径 为1px 和30px 的比较</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570284233038.png" alt="1570284233038"></p><p>带上 inset 的效果</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570284255781.png" alt="1570284255781"></p><h2 id="扩散半径"><a href="#扩散半径" class="headerlink" title="扩散半径"></a>扩散半径</h2><p>这是第四个值。取正值时，阴影扩大；取负值时，阴影收缩。默认为0，此时阴影与元素同样大。需要考虑 <code>inset</code> </p><p><code>spread-radius</code> 为1px  和30px  的效果</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570284140143.png" alt="1570284140143"></p><p>带上 inset 的效果</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1570284168610.png" alt="1570284168610"></p><h1 id="带图片的响应式图片容器"><a href="#带图片的响应式图片容器" class="headerlink" title="带图片的响应式图片容器"></a>带图片的响应式图片容器</h1><p>功能：实现在宽度设置百分比的情况下，拖动浏览器下 demo保持<strong>正方形</strong>。同时内部image 不会被拉伸，同比例缩放。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="comment">/* background: #333; */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../images/feifei.jpg'</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: center center;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理： padding使用百分比是基于父级的宽度。没有给demo 高度，使用paddingTop 撑开，同时paddingTop 撑开的高度 = 父级宽度* 100% ，实现正方形。</p><p>图片使用 backgroundImage 放入，设置 居于中心放置 ，使用 <code>cover</code> 。</p><h1 id="table-布局的初使用"><a href="#table-布局的初使用" class="headerlink" title="table 布局的初使用"></a>table 布局的初使用</h1><p><code>display:table</code> 子元素子父元素中水平垂直居中</p><p>使用：1.父级设置<code>display:table</code></p><p>​           2.子集设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:table-cell</span>;</span><br><span class="line"><span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span>;</span><br><span class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span><br></pre></td></tr></table></figure><h1 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h1><h1 id="滚动条样式美化"><a href="#滚动条样式美化" class="headerlink" title="滚动条样式美化"></a>滚动条样式美化</h1><p><code>::-webkit-scrollbar</code> CSS伪类选择器影响了一个元素的滚动条的样式</p><p>【但是 MDN 提示，该特征是非标准尽量不要在生产环境中使用。】</p><ul><li><code>::-webkit-scrollbar</code> — 整个滚动条.</li><li><code>::-webkit-scrollbar-button</code> — 滚动条上的按钮 (上下箭头).</li><li><code>::-webkit-scrollbar-thumb</code> — 滚动条上的滚动滑块.</li><li><code>::-webkit-scrollbar-track</code> — 滚动条轨道.</li><li><code>::-webkit-scrollbar-track-piece</code> — 滚动条没有滑块的轨道部分.</li><li><code>::-webkit-scrollbar-corner</code> — 当同时有垂直滚动条和水平滚动条时交汇的部分.</li><li><code>::-webkit-resizer</code> — 某些元素的corner部分的部分样式(例:textarea的可拖动按钮).</li></ul><h1 id="CSS中自定义属性"><a href="#CSS中自定义属性" class="headerlink" title="CSS中自定义属性"></a>CSS中自定义属性</h1><p><code>--*</code> CSS变量，带有<code>--</code>的前缀的属性名，表示的是带有值的自定义属性，其可以通过<code>var</code> 函数在全文档范围内复用。并且值将会借助级联算法和自定义属性值运算出来。</p><p>举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="comment">/* 1.自定义属性 */</span></span><br><span class="line">     <span class="attribute">--percent</span>:<span class="number">50</span>;</span><br><span class="line">     <span class="comment">/* width: 200px; */</span></span><br><span class="line">     <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">     <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">     <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">     <span class="comment">/* 2.利用线性渐变实现进度条 */</span></span><br><span class="line">     <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(#0ff,#0ff);</span><br><span class="line">     <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">     <span class="comment">/* var 获取自定义属性的值 */</span></span><br><span class="line">     <span class="attribute">background-size</span>: <span class="built_in">calc</span>(var(--percent) * <span class="number">1%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>var</code> 获取到 <code>--percent</code> 定义的值</li><li><code>--percent</code> 定义的值 是可以被计算的 在这里 使用<code>calc</code> 计算成百分比</li></ul><p>并且：如果是同名的 自定义属性，使用在最近父级中被定义的。</p><h1 id="outline-轮廓"><a href="#outline-轮廓" class="headerlink" title="outline 轮廓"></a>outline 轮廓</h1><p>轮廓与边框在以下几个方面存在不同：</p><ul><li><p>轮廓不占据空间，它们被描绘于内容之上</p></li><li><p>轮廓可以是非矩形的。在Gecko/Firefox中，轮廓是矩形的，但是Opera则会围绕元素结构绘制非矩形的形状，如下图</p></li><li><p>包括 <code>outline-color</code> <code>outline-style</code> <code>outline-width</code> </p></li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 宽度 | 样式 | 颜色 */</span></span><br><span class="line"><span class="selector-tag">outline</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">white</span>;</span><br></pre></td></tr></table></figure><h1 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h1><p>可缩放的矢量图</p><ul><li>使用代码书写而成</li><li>缩放不会失真</li><li>内容轻量</li></ul><h1 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h1><p><strong>data url</strong></p><p>将目标文件的数据直接写在路径位置。</p><p>语法：<code>data:MIME,数据</code></p><ul><li>减少浏览器的请求</li><li>减少响应时间</li></ul><p>缺点：</p><ul><li>不利于浏览器的缓存，会在刷新的时候重新请求</li></ul><p>一般针对 图片。</p><h2 id="base64编码形式"><a href="#base64编码形式" class="headerlink" title="base64编码形式"></a>base64编码形式</h2><h1 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h1><h2 id="不通浏览器针对新的CSS3熟悉兼容"><a href="#不通浏览器针对新的CSS3熟悉兼容" class="headerlink" title="不通浏览器针对新的CSS3熟悉兼容"></a>不通浏览器针对新的CSS3熟悉兼容</h2><p>可以用插件傻瓜式操作</p><h2 id="背景图多选一"><a href="#背景图多选一" class="headerlink" title="背景图多选一"></a>背景图多选一</h2><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">image-set</span>( "<span class="selector-tag">cat</span><span class="selector-class">.png</span>" 1<span class="selector-tag">x</span>,</span><br><span class="line">                             "<span class="selector-tag">cat-2x</span><span class="selector-class">.png</span>" 2<span class="selector-tag">x</span>,</span><br><span class="line">                             "<span class="selector-tag">cat-print</span><span class="selector-class">.png</span>" 600<span class="selector-tag">dpi</span>);</span><br></pre></td></tr></table></figure><h2 id="针对IE的CSS前缀"><a href="#针对IE的CSS前缀" class="headerlink" title="针对IE的CSS前缀"></a>针对IE的CSS前缀</h2><ul><li><p><code>*</code> IE 5、6、6</p></li><li><p><code>_</code> 兼容 IE5—IE6</p></li><li><p><code>属性值\9</code>  兼容IE5-IE10</p></li><li><p><code>属性值\0</code> 兼容IE8-IE10</p></li><li><p><code>属性值\9\0</code>  兼容IE9-IE10</p><p>IE 的外边距 BUG，浮动元素的左外边距翻倍。</p></li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端组件——better-scroll</title>
      <link href="/2019/08/21/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94better-scroll/"/>
      <url>/2019/08/21/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94better-scroll/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>移动端 触摸滚动插件</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="1-html结构："><a href="#1-html结构：" class="headerlink" title="1.html结构："></a>1.html结构：</h2><p>必须有包裹，即<code>div.wrapper</code> 包裹 <code>div.content</code> 标签和类名不做需求。并且，内部<code>content</code> 高度/宽度 必须大于外部的盒子，才能拖动。</p><h2 id="2-JS部分："><a href="#2-JS部分：" class="headerlink" title="2.JS部分："></a>2.JS部分：</h2><p>实例化 better-scroll 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bscroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>,&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-额外功能：滑动实时显示滑动的距离"><a href="#3-额外功能：滑动实时显示滑动的距离" class="headerlink" title="3.额外功能：滑动实时显示滑动的距离"></a>3.额外功能：滑动实时显示滑动的距离</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性probeType设置，一共有4个值，0，1,2,3 ,0和1是不进行实时侦测位置，2是在手指滚动的过程中侦测，手指离开之后就不进行侦测，3是只要是滚动就侦测，手指离开之后有个惯性滚动，即在这个过程中也会侦测</span></span><br><span class="line"><span class="keyword">const</span> bscroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>,&#123;</span><br><span class="line">    probeType：<span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bscroll.on(<span class="string">'scroll'</span>,position =&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(position)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-内部点击事件。"><a href="#4-内部点击事件。" class="headerlink" title="4.内部点击事件。"></a>4.内部点击事件。</h2><p>如果在wrapper内部有按钮或者需要点击事件的，点击会无法执行。需要额外增加click属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bscroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>,&#123;</span><br><span class="line">    click:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-上拉刷新：thresold"><a href="#5-上拉刷新：thresold" class="headerlink" title="5.上拉刷新：thresold"></a>5.上拉刷新：thresold</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bscroll = <span class="keyword">new</span> BScroll(<span class="string">'.wrapper'</span>,&#123;</span><br><span class="line">   pullUpLoad:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">bscroll.on(<span class="string">'pullingUp'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上拉显示更多'</span>)；</span><br><span class="line">    <span class="comment">//发送网络请求，请求更多资源</span></span><br><span class="line">    <span class="comment">//等请求完成，并且将新数据展示出来之后，必须执行  停止上拉加载更多 </span></span><br><span class="line">    bscroll.finishPullUp()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-封装-滚动组件，减少耦合"><a href="#6-封装-滚动组件，减少耦合" class="headerlink" title="6.封装 滚动组件，减少耦合"></a>6.封装 滚动组件，减少耦合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"wrapper"</span> ref=<span class="string">"wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">        &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;    </span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"> import BScroll from 'better-scroll'</span></span><br><span class="line"><span class="regexp"> export default&#123;</span></span><br><span class="line"><span class="regexp">data()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            scroll:null</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">     mounted()&#123;</span></span><br><span class="line"><span class="regexp">         this.scroll = new BScroll(this.$refs.wrapper,&#123;</span></span><br><span class="line"><span class="regexp">             </span></span><br><span class="line"><span class="regexp">         &#125;)</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&#125;         </span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>引用该组件的时候，手动给最外层的盒子，添加高度或宽度</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>promise处理异步请求</title>
      <link href="/2019/08/21/promise%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/08/21/promise%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="定义以及使用"><a href="#定义以及使用" class="headerlink" title="定义以及使用"></a>定义以及使用</h1><h2 id="前景知识："><a href="#前景知识：" class="headerlink" title="前景知识："></a>前景知识：</h2><h3 id="1-区分同步任务和-异步任务："><a href="#1-区分同步任务和-异步任务：" class="headerlink" title="1.区分同步任务和 异步任务："></a>1.区分同步任务和 异步任务：</h3><p>程序里面所有的任务，可以分成两类：同步任务（synchronous）和异步任务（asynchronous）。</p><p>1.同步任务是那些没有被引擎挂起、在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。</p><p>2.异步任务是那些被引擎放在一边，不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有“堵塞”效应。</p><p>3.如何检测 异步操作结束，之前可以通过 回调函数、监听事件完成等，但存在 不利于阅读，各个部分高度耦合，程序结构混乱以及流程难以追踪。</p><a id="more"></a><h3 id="2-promise-提出的必要："><a href="#2-promise-提出的必要：" class="headerlink" title="2.promise 提出的必要："></a>2.promise 提出的必要：</h3><p>1.原生JS 是 单线程的。遇到异步请求的时候 会整个程序停下来去处理这个异步操作，导致页面卡死。</p><p>2.请求异步数据有时候并不是一步到位的。会在请求数据1 的返回操作中又去请求数据2，甚至3，造成 回调地狱。</p><h3 id="3-优点："><a href="#3-优点：" class="headerlink" title="3.优点："></a>3.优点：</h3><p>1.代码可读性高，页面美观。</p><p>2.充当 异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口 。使得异步操作写起来像 同步，而不必一层层嵌套回调。</p><h2 id="定义、本质"><a href="#定义、本质" class="headerlink" title="定义、本质"></a>定义、本质</h2><p>Promise 是一个对象，也是一个构造函数。它 接收一个回调函数 作为参数，它返回的就是一个Promise 实例。</p><p>它的设计思想是，所有异步任务都返回一个promise 实例，Promise 实例有一个<code>then</code> 方法，用来指定下一步的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(func);</span><br><span class="line">p1.then(func2)</span><br><span class="line"><span class="comment">// 在这里就是 func1的异步操作执行完成之后，就会执行 func2，</span></span><br><span class="line"><span class="comment">// 传统的写法是： 将 func2传入func1的，写成 func1(func2)。而 promise使得二者变成 链式写法，改善了可读性，并且使得 多层嵌套的回调函数变得方便。</span></span><br></pre></td></tr></table></figure><p>传统的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用promise：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="built_in">Promise</span>(step1))</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-只处理一个请求"><a href="#1-只处理一个请求" class="headerlink" title="1.只处理一个请求"></a>1.只处理一个请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">/* 异步操作，可以用setTimeout 代替模拟效果*/</span></span><br><span class="line">    resolve();</span><br><span class="line">    reject();</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;...&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure><p><code>resolve</code> 和<code>reject</code> 是作为回调函数的参数传入的，且分别对应 回调成功 和回调失败。在获取数据的时候 ，仅仅调用这两个方法。而不具体如何操作。在 链式调用<code>.then()</code> 和 <code>.catech()</code> 的时候会具体处理返回的数据或者错误信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 另外一种写法。将 resolve和reject 的使用方法语句都写在 .then 中</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>);</span><br><span class="line">        reject(<span class="string">'err'</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then( <span class="function"><span class="params">data</span>=&gt;</span>&#123;...&#125;,err=&gt;&#123;....&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-多次链式调用"><a href="#2-多次链式调用" class="headerlink" title="2.多次链式调用"></a>2.多次链式调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>)</span><br><span class="line">        reject(<span class="string">'err'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'1次'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">          resolve(data +<span class="string">'111'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'2次'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">         resolve(data +<span class="string">'222'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'3次'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结构划分：</p><p><img src="https://i.loli.net/2019/08/21/YNxrMQ9enkdsyLT.png" width="300px" height="400px"></p><p>输出结果</p><p><img src="https://i.loli.net/2019/08/21/kdyDKU7s9faJChe.png" alt="1566357518944"></p><p><strong>解释一下</strong>： 后两个reject 省略了。是可选参数。所以后两个请求也就可以不用 <code>.catch</code> 了</p><p>其中 2次请求数据  和3次请求数据 中 并没有使用 异步请求处理参数，所以可以直接调用 API： <code>Promise.resolve()</code></p><p>即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(...);</span><br><span class="line"> &#125;).then()</span><br></pre></td></tr></table></figure><p>可以简化成：（不需要 new 实例）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data+<span class="string">'222'</span>)</span><br></pre></td></tr></table></figure><p>所以整个3次请求数据的语句又可以简化成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'hello'</span>)</span><br><span class="line">        reject(<span class="string">'err'</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'1次'</span>);</span><br><span class="line">    <span class="comment">//  因为 2次调用不涉及异步请求，直接调用 promise.resolve</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data+<span class="string">'111'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'2次'</span>);</span><br><span class="line">     <span class="comment">// 直接调用 promise.resolve</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data+<span class="string">'222'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="string">'3次'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>进一步简化： 省略 二次调用和三次调用的  <code>Promise.resolve</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">         resolve(<span class="string">'hello'</span>)</span><br><span class="line">         reject(<span class="string">'err'</span>);</span><br><span class="line">     &#125;,<span class="number">1000</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data,<span class="string">'1次'</span>);</span><br><span class="line">     <span class="keyword">return</span> (data+<span class="string">'111'</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data,<span class="string">'2次'</span>);</span><br><span class="line">     <span class="keyword">return</span> (data+<span class="string">'222'</span>)</span><br><span class="line"> &#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data,<span class="string">'3次'</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="3-同时处理2个异步请求"><a href="#3-同时处理2个异步请求" class="headerlink" title="3.同时处理2个异步请求"></a>3.同时处理2个异步请求</h3><p>使用<code>Promise.all</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="comment">// 第一个请求</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="string">'hello'</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 第二个请求</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="string">'world'</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res[0] 为返回的第一个结果，</span></span><br><span class="line">    <span class="comment">// res[1] 为返回的第二个结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i.loli.net/2019/08/21/k2z3TAiOlFbSXmU.png" alt="1566369488626"></p><p>用 <code>Easy Mock</code> 模拟了数据接口，在<code>Promise.all</code> 中 同时发起两个网络请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"https://easy-mock.com/mock/5d5ce77c7bd1911c17e50f80/getinfo"</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"https://easy-mock.com/mock/5d5ce77c7bd1911c17e50f80/getnumbers"</span>,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res[0] 为返回的第一个结果，</span></span><br><span class="line">    <span class="comment">// res[1] 为返回的第二个结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果 </p><p><img src="https://i.loli.net/2019/08/21/m1tS83TxfLhXZUe.png" alt="1566370340912"></p><h3 id="多个请求包装成一个promise实例"><a href="#多个请求包装成一个promise实例" class="headerlink" title="多个请求包装成一个promise实例"></a>多个请求包装成一个promise实例</h3><p><code>promise.race</code></p><p>在Vuex 中 <code>actions</code> 是处理异步操作的，就可以使用 promise 去处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS之居中</title>
      <link href="/2019/08/20/CSS%E4%B9%8B%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/08/20/CSS%E4%B9%8B%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="前景知识"><a href="#前景知识" class="headerlink" title="前景知识"></a>前景知识</h1><ul><li><p>明确区分块级元素、行级元素和行级块元素。</p></li><li><p>熟悉块级元素和行级元素在布局上的不同和优势，以及如何手动更改。</p></li><li><p>熟悉盒模型，以及如何手动更改 IE盒模型和怪异盒模型</p></li></ul><h1 id="单一元素在浏览器中居中"><a href="#单一元素在浏览器中居中" class="headerlink" title="单一元素在浏览器中居中"></a>单一元素在浏览器中居中</h1><a id="more"></a><h2 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h2><p>​    方法1：绝对定位之常规操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    background-color: palegoldenrod;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    transform: translateX(<span class="number">-50</span>%) translateY(<span class="number">-50</span>%);</span><br><span class="line">    <span class="comment">// transform 换成margin也可以，就是margin数值需要计算，遇到带小数的麻烦，transfrom直接-50%方便。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：绝对定位之全是0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    background-color: palegoldenrod;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    <span class="comment">/* 全是0，绝对定位元素的自动伸缩的特性*/</span></span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    margin: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：flex布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: <span class="number">100</span>%;</span><br><span class="line">    <span class="comment">/* 主轴center，纵轴center，要注意高度要设置自适应不然纵轴无法center*/</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">    background-color: palegoldenrod;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="行级元素"><a href="#行级元素" class="headerlink" title="行级元素"></a>行级元素</h2><h1 id="元素内部居中"><a href="#元素内部居中" class="headerlink" title="元素内部居中"></a>元素内部居中</h1><h2 id="方法1：绝对定位-父级相对定位（子绝父相"><a href="#方法1：绝对定位-父级相对定位（子绝父相" class="headerlink" title="方法1：绝对定位+父级相对定位（子绝父相"></a>方法1：绝对定位+父级相对定位（子绝父相</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.wrapper&#123;</span><br><span class="line">    width: <span class="number">500</span>px;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    background-color: thistle;</span><br><span class="line">    <span class="comment">/* 绝对定位之后，也可以使用上面全是0自适应的方法，不用拘泥 */</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">50</span>%;</span><br><span class="line">    left: <span class="number">50</span>%;</span><br><span class="line">    transform: translateX(<span class="number">-50</span>%) translateY(<span class="number">-50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2-：margin-手动计算边距-小心-外边距塌陷咯"><a href="#方法2-：margin-手动计算边距-小心-外边距塌陷咯" class="headerlink" title="方法2 ：margin +手动计算边距(小心 外边距塌陷咯~~)"></a>方法2 ：margin +手动计算边距(小心 外边距塌陷咯~~)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.wrapper&#123;</span><br><span class="line">    width: <span class="number">500</span>px;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line">    <span class="comment">/* position: relative; */</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.box&#123;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    background-color: thistle;</span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    margin-top: <span class="number">200</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-flex"><a href="#3-flex" class="headerlink" title="3.flex"></a>3.flex</h2><p>利用flex 的属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure><h2 id="4-flex-marginAuto"><a href="#4-flex-marginAuto" class="headerlink" title="4.flex+ marginAuto"></a>4.flex+ marginAuto</h2><p>利用 margin 自动撑到中间位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-table-cell"><a href="#5-table-cell" class="headerlink" title="5.table-cell"></a>5.table-cell</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:table-cell</span>;</span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br></pre></td></tr></table></figure><h2 id="6-absolute-四个方位值相等-marginAuto"><a href="#6-absolute-四个方位值相等-marginAuto" class="headerlink" title="6.absolute+ 四个方位值相等+marginAuto"></a>6.absolute+ 四个方位值相等+marginAuto</h2><p>不一定四个方位值是0，必须定宽。</p><p>宽度定了，margin为自适应，吸收剩余空间，把元素置于中间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">    // margin不能漏了</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-grid"><a href="#7-grid" class="headerlink" title="7.grid"></a>7.grid</h2><p>父级：<code>display:grid</code></p><p>子集：<code>align-self: center;justify-self: center;</code></p><h1 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h1><p><code>text-align:center;</code> 文本居中显示</p><p><code>line-height: 500px;</code> 文本行高== 容器高度</p><p>注意： 容器内 有多行文本 使用 <code>line-height: 500px;</code>  会导致每一行都是 容器高度，使得文字超出容器。</p><p>最方便的还是另外设置一下容器包裹一下文字，知道文本高度在父容器上设置上下padding。enmmm 再看看有什么其他的方法。</p><p>补充：多行文本居中</p><p>方法：给文字容器设置 table布局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.wrapper&#123;</span><br><span class="line">    width: <span class="number">500</span>px;</span><br><span class="line">    height: <span class="number">500</span>px;</span><br><span class="line">    background-color: powderblue;</span><br><span class="line"></span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">    display:table-cell;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片居中"><a href="#图片居中" class="headerlink" title="图片居中"></a>图片居中</h1><h2 id="1-line-hight-与verticalAlign-搭配"><a href="#1-line-hight-与verticalAlign-搭配" class="headerlink" title="1.line-hight 与verticalAlign 搭配"></a>1.line-hight 与verticalAlign 搭配</h2><p><strong>适用场景</strong>：图片未知大小</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSS </span></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .container &#123;</span><br><span class="line">        height: <span class="number">250</span>px;</span><br><span class="line">        width: <span class="number">250</span>px;</span><br><span class="line">        border: 1px solid #000;</span><br><span class="line">        line-height: <span class="number">250</span>px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        text-align: center;</span><br><span class="line">        font-size: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    img &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ HTML </span></span><br><span class="line"><span class="regexp"> &lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">       &lt;img src="../im</span>ages/yaya.jpg<span class="string">" alt="</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 因为 vertical-align:middle 是设置元素的中垂点 = 父级的基线 + 1/2 父元素中字母X的高度 </span></span><br><span class="line"><span class="string">// 英文字母X在父元素中并不居中，且每个字体的字符X的高低位置不一致。</span></span><br><span class="line"><span class="string">//  所以在这里我们需要设置 fontSize 为0。</span></span><br></pre></td></tr></table></figure><h2 id="2-flex-布局"><a href="#2-flex-布局" class="headerlink" title="2.flex 布局"></a>2.flex 布局</h2><p>适用： 图文混排。左边是图片，右边的文字，文字多少未知，图片垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span><br><span class="line"><span class="selector-tag">justify-content</span><span class="selector-pseudo">:center</span>;</span><br><span class="line"><span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</span><br></pre></td></tr></table></figure><h2 id="3-利用伪元素"><a href="#3-利用伪元素" class="headerlink" title="3.利用伪元素"></a>3.利用伪元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./img/logo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rotate和rotate3d</title>
      <link href="/2019/08/19/rotate%E5%92%8Crotate3d/"/>
      <url>/2019/08/19/rotate%E5%92%8Crotate3d/</url>
      
        <content type="html"><![CDATA[<h1 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h1><p>平面的。</p><p><img src="https://mdn.mozillademos.org/files/3548/transform-functions-rotate_19.5.png" alt></p><p>旋转角度为正，则顺时针运动，反之逆时针。</p><h1 id="rotate3d"><a href="#rotate3d" class="headerlink" title="rotate3d"></a>rotate3d</h1><p>立体的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>px、em和rem</title>
      <link href="/2019/08/18/CSS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8D%95%E4%BD%8D/"/>
      <url>/2019/08/18/CSS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="px"><a href="#px" class="headerlink" title="px"></a>px</h1><p>px（像素）单位，作为具体的数值，设置长宽高和字体大小的时候比较精确和固定。</p><p>问题：1、固定长宽高在不同设备上打开会出现页面布局错误。2.固定的字体大小在改变浏览器大小的时候也会导致原有的页面布局被打破。</p><h1 id="em"><a href="#em" class="headerlink" title="em"></a>em</h1><p>em作为一个相对值，是<strong>基于父元素的字体大小</strong> 设置的，而且作为 一个相对值也是一个比例，计算公式</p><p>实际的字体像素值：<code>em *(父元素的fontSize值)</code> </p><p>一个简单的栗子：</p><p>三级嵌套的div，内设文字，问题的字体大小都为 <code>font-size:1.5em;</code> 可以看到 文字的大小 是逐级增大的，每次的字体大小值都是基于上一个（即父元素）的fontSize</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        border: 1px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">    body,html&#123;</span><br><span class="line">        font-size: <span class="number">10</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    div .top&#123;</span><br><span class="line">        <span class="comment">// 每一层文字 大小 都是 父级的 1.5倍</span></span><br><span class="line">        font-size:<span class="number">1.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">    div .middle&#123;</span><br><span class="line">        font-size:<span class="number">1.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">    div .bottom&#123;</span><br><span class="line">        font-size:<span class="number">1.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 嵌套的三级div</span></span><br><span class="line"><span class="regexp">&lt;div class="top"&gt;</span></span><br><span class="line"><span class="regexp">        top</span></span><br><span class="line"><span class="regexp">        &lt;div class="middle"&gt;</span></span><br><span class="line"><span class="regexp">            middle</span></span><br><span class="line"><span class="regexp">            &lt;div class="bottom"&gt;</span></span><br><span class="line"><span class="regexp">                bottom</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="https://i.loli.net/2019/09/04/gzewnPXYW6lS8Is.png" alt></p><h1 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h1><p>rem也是一个相对值，但与<code>em</code>不同的是，<code>rem</code>是基于<strong>页面根元素html</strong>的。当给html设置一个统一的fontSize 之后，之后的元素设置一个相对值，后续更改也会简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给html 设置 62.5%的fontSize，即62.5% * 16px = 10px</span></span><br><span class="line">html &#123; font-size:<span class="number">62.5</span>%&#125;</span><br><span class="line">body &#123;font-size: <span class="number">1.4</span>rem;&#125;  <span class="comment">/*1.4 × 10px = 14px */</span></span><br><span class="line">h1 &#123; font-size: <span class="number">2.4</span>rem;&#125;  <span class="comment">/*2.4 × 10px = 24px*/</span></span><br></pre></td></tr></table></figure><h1 id="viewport-width-amp-viewport-height"><a href="#viewport-width-amp-viewport-height" class="headerlink" title="viewport width &amp; viewport height"></a>viewport width &amp; viewport height</h1><p>基于浏览器 可视区大小（浏览器去掉任务栏，滚动轴的那个空白界面）</p><p>值基于 1~100之间，50vw 即使画面宽度的一半</p><h1 id="vmin-amp-vmax"><a href="#vmin-amp-vmax" class="headerlink" title="vmin  &amp; vmax"></a>vmin  &amp; vmax</h1><p>vmin 代表屏幕较短的一边，vmax 代表屏幕较长的一边</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node初识</title>
      <link href="/2019/08/13/node%E5%88%9D%E8%AF%86/"/>
      <url>/2019/08/13/node%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>1.安装</p><p>2.执行</p><h1 id="1-读、写文件"><a href="#1-读、写文件" class="headerlink" title="1.读、写文件"></a>1.读、写文件</h1><h2 id="使用-fs模块"><a href="#使用-fs模块" class="headerlink" title="使用 fs模块"></a>使用 <code>fs</code>模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(<span class="string">'./newfile.txt'</span>,<span class="string">'大家好这是fs写的新文件'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-开启一个简单的服务器"><a href="#2-开启一个简单的服务器" class="headerlink" title="2.开启一个简单的服务器"></a>2.开启一个简单的服务器</h1><h2 id="1-使用模块http"><a href="#1-使用模块http" class="headerlink" title="1.使用模块http"></a>1.使用模块<code>http</code></h2><h2 id="2-创建-server实例"><a href="#2-创建-server实例" class="headerlink" title="2.创建 server实例"></a>2.创建 server实例</h2><h3 id="server-on-接收请求，作出不同响应"><a href="#server-on-接收请求，作出不同响应" class="headerlink" title="server.on 接收请求，作出不同响应"></a><code>server.on</code> 接收请求，作出不同响应</h3><p>默认：<code>server.on(&quot;request&quot;,function(req,res){})</code></p><p>细分：对请求的内容区分，相应不同内容。</p><ul><li>获取到 url地址<code>req.url</code></li><li>判断 <code>req.url</code> 内容返回不同的内容。</li></ul><h3 id="2-1响应：res-write-quot-quot"><a href="#2-1响应：res-write-quot-quot" class="headerlink" title="2.1响应：res.write(&quot;&quot;)"></a>2.1响应：<code>res.write(&quot;&quot;)</code></h3><ul><li><p>响应write 可以由多个，但是必须要有end。有时候可以省略end，直接在end的时候放入内容。</p></li><li><p>相应内容为中文的时候，需要设置响应头。</p><p>服务器默认发送的内容是 utf-8编码格式，但是浏览器不知道服务器使用的什么格式</p><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain;charset=utf-8&#39;)</code></p></li></ul><h3 id="2-2结束响应res-end"><a href="#2-2结束响应res-end" class="headerlink" title="2.2结束响应res.end()"></a>2.2结束响应<code>res.end()</code></h3><h2 id="3-server-listen-绑定端口号"><a href="#3-server-listen-绑定端口号" class="headerlink" title="3.server.listen 绑定端口号"></a>3.<code>server.listen</code> 绑定端口号</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"服务器已经开启了喵"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建Server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.监听request请求事件，请求设置处理函数</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到了请求'</span>,req)</span><br><span class="line">    res.write(<span class="string">'hello world'</span>)</span><br><span class="line">    res.end() <span class="comment">//以上可以直接 res.end('hello world)</span></span><br><span class="line"><span class="comment">//获取到 请求路径的地址</span></span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.绑定端口号，默认是80，</span></span><br><span class="line">server.listen(<span class="number">80</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is on ,you can use it!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="根据路径不同区别页面输出"><a href="#根据路径不同区别页面输出" class="headerlink" title="根据路径不同区别页面输出"></a>根据路径不同区别页面输出</h1><p>重点在于判断 请求的路径 <code>req.url</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = req.url</span><br><span class="line">    <span class="keyword">if</span>(url ==<span class="string">'/'</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = [</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'zss1'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'zss2'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">'zss3'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;,</span><br><span class="line">            &#123; <span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">'zss4'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment">// 返回的数据格式只能是：二进制数据或者字符串</span></span><br><span class="line">        <span class="comment">// 数组-字符串： JSON.stringify</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.end(<span class="string">'not found'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565675474226.png" alt="1565675474226"></p><p>解决中文乱码问题：</p><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain;charset=utf-8&#39;)</code>即普通文本</p><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/html;charset=utf-8&#39;)</code> html标签字符串。</p><p><code>res.setHeader(&#39;Content-Type&#39;,&#39;image/jpeg&#39;)</code> 设置图片显示</p><h1 id="返回数据渲染页面"><a href="#返回数据渲染页面" class="headerlink" title="返回数据渲染页面"></a>返回数据渲染页面</h1><p>读取文本信息渲染页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer()</span><br><span class="line">server.on(<span class="string">'request'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="comment">// var url = req.url;</span></span><br><span class="line">    fs.readFile(<span class="string">'./1.html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.end(<span class="string">'error'</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>1.html:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;h3 style=<span class="string">"color:red"</span>&gt;haha&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>页面显示：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1565681200385.png" alt="1565681200385"></p><h1 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h1><p>1.安装：<code>npm install art-template</code></p><p>2.加载：<code>var template = require(&#39;art-template&#39;)</code> </p><p>3.模板结构置于html文件中</p><p>4.渲染：</p><ul><li>template(filename,data); //基于模板名渲染</li><li>template.compile(source,options);//将模板源代码编译成函数</li><li>template.render(source,data,options);//模板源代码编译成函数立即执行</li></ul><h1 id="export-和require"><a href="#export-和require" class="headerlink" title="export 和require"></a>export 和require</h1><p>require 可以加载 核心模块，第三方模块，自定义模块。当需要 加载多个js文件的时候，就需要用require 和export。</p><ul><li><p>export 是导出文件变量，由require接收。</p></li><li><p><code>export</code> 可以有多个，<code>export default</code> 仅有一个。通过<code>export</code>方式导出，在导入时加花括号，exprt default 则不需要</p></li></ul><h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><p>原先http略有不足，无法满足需求，需要使用框架加快开发效率。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><p>基于 Node.js 封装的上层服务框架，它提供了更简洁的 API 更实用的新功能。</p></li><li><p>它通过中间件和路由让程序的组织管理变的更加容易；它提供了丰富的 HTTP 工具；</p></li><li><p>它让动态视图的渲染变的更加容易；它还定义了一组可拓展标准。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>安装（属于第三方插件</p><p><code>npm install --save express</code></p></li><li><p>初始化</p><p><code>npm init</code></p></li><li><p>引包</p><p><code>var express = require(&#39;express&#39;);</code></p></li><li><p>创建实例</p><p><code>var app = express();</code></p></li><li><p>监听：</p><p><code>app.listen(3000,function(){}</code></p><p><code>);</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建 app</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.监听</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'使用 express创建的 接口'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>拓展——：nodemon ,第三方命名航工具，<code>nodemon</code>来帮我们解决频繁修改代码重启服务器问题。</p><p>是一个基于nodejs开发的一个第三方命令行工具。</p><ul><li><p>安装：<code>npm install --global nodemon</code></p></li><li><p>使用：<code>nodemon xxx.js</code></p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1573919738305.png" alt="1573919738305"></p></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>send: 相比较于原始的 <code>res.write()</code> 和<code>res.end()</code> 搭配使用，<code>send</code>会自动完善 contenttype 部分。</li></ul><h2 id="静态资源的区别开放"><a href="#静态资源的区别开放" class="headerlink" title="静态资源的区别开放"></a>静态资源的区别开放</h2><p>1.<code>app.use(&#39;/static/image&#39;,express.static(&#39;./static/public&#39;));</code></p><p>当以 <code>/static/image/</code> 开头的时候，去 <code>/static/image/</code> 目录下查找对应的资源。</p><p>2.当省略 /static/ 第一个路径名，即客户端调用//image 的时候也会自动查找到 /static/image </p><p><code>app.use(express.static(&#39;./static/public&#39;))</code></p><h3 id="路由函数"><a href="#路由函数" class="headerlink" title="路由函数"></a>路由函数</h3><p>创建<code>router.js</code> 文件，内部放置所有的路径请求和响应。</p><h4 id="请求方法不同"><a href="#请求方法不同" class="headerlink" title="请求方法不同"></a>请求方法不同</h4><ul><li>post    <code>app.get()</code></li><li>get     <code>app.post()</code></li></ul><h2 id="在-express中使用-art-template"><a href="#在-express中使用-art-template" class="headerlink" title="在 express中使用 art-template"></a>在 express中使用 art-template</h2><p>安装</p><p><code>npm install --save art-template</code></p><p><code>npm install --save express-art-template</code></p><p>配置</p><p><code>app.engine(&#39;art&#39;,require(&#39;express-art-template&#39;))</code></p><p>当渲染使用 <code>.art</code>结尾的文件的时候，使用 art-template 模板引擎</p><p>使用 </p><p>创建 404.html 文件，再修改成 404.art</p><p><code>res.render(&#39;404.art&#39;)</code></p><p>但这样会出现 修改文件后缀名的情况，为了避免。可以直接在配置的时候 使用<code>app.engine(&#39;html&#39;,require(&#39;express-art-template&#39;))</code></p><h2 id="在表单中获取post-请求"><a href="#在表单中获取post-请求" class="headerlink" title="在表单中获取post 请求"></a>在表单中获取post 请求</h2><p>body-parser</p><p>没有内置获取post请求的 api</p><p>安装：</p><p><code>npm install --save body-parser</code></p><p>引包：</p><p><code>var bodyParser = require(&#39;body-parser&#39;)</code></p><p>配置body-parser中间件</p><p><code>app.use(bodyParser.urlencoded({ extended: false}));</code></p><p><code>app.use(bodyParser.json());</code></p><h1 id="crud-node-express"><a href="#crud-node-express" class="headerlink" title="crud-node-express"></a>crud-node-express</h1><p>1.页面引用了 bootstrap 模板，资源文件使用 npm 下载，并在app.js 中开放路径</p><p>2.渲染 html 文件需要加载express-art-template文件，前者又 需要 art-template</p><p>3.数据存放在本地json中，利用fs 读取，<strong>因为在json中是字符串格式</strong>，需要<code>JSON.parse()</code> 进行格式转换 才能用来渲染。</p><p>4.制作 路由文件，接口比较多的情况下 将所有路由分离<strong>出来成一个router.js文</strong>件。代码比较简洁。 express 有单独的包装路由的api</p><p>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引用</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 2.创建路由容器</span></span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="comment">//3.把路由挂载到router路由容器中</span></span><br><span class="line">router.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// 4.将router导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在入口函数中将router挂载</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure><p>注意 挂在路由在 配置中间件之后。挂载需要时间</p><p>路由设计</p><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get参数</th><th>post参数</th><th></th></tr></thead><tbody><tr><td>GET</td><td>/students</td><td></td><td></td><td>渲染页面</td></tr><tr><td>GET</td><td>/students/new</td><td></td><td></td><td></td></tr><tr><td>POST</td><td>/students</td><td></td><td>name.age,gender,bobby</td><td>处理提交的新增数据</td></tr><tr><td>GET</td><td>/students/edit</td><td>id</td><td></td><td>改-找到对应的数据列表</td></tr><tr><td>POST</td><td>/students/edit</td><td></td><td>id,name,age,gender.hobby</td><td>改-提交修改的数据</td></tr><tr><td>GET</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="链接到mongodb"><a href="#链接到mongodb" class="headerlink" title="链接到mongodb"></a>链接到mongodb</h1><p>使用mongoose第三方进行mongodb数据，包括链接，数据操作以及其他</p><p>1.导入</p><p><code>const mongoose = require(&quot;mongoose&quot;)</code></p><p>2.链接到mongodb数据库</p><p><code>mongoose.connect(&quot;mongodb://localhost/自定义数据库名字&quot;)</code> </p><p>  2.1 如果需要连接到多个数据库。</p><p>​    <code>createConnection([uri],[options])</code></p><ol start="3"><li>断开连接</li></ol><p><code>mongoose.disconnect()</code></p><h2 id="mongodb数据库安装"><a href="#mongodb数据库安装" class="headerlink" title="mongodb数据库安装"></a>mongodb数据库安装</h2><p>1.安装。完成之后 会有这些执行文件</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575623320186.png" alt="1575623320186"></p><p>2.配置环境变量，这样可以在任意路径下执行。</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575623437446.png" alt="1575623437446"></p><p>把路径添加到 path变量中。</p><p>3.可选择安装的 mongodb可视化工具。mongodb Compass Community</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1575623543776.png" alt="1575623543776"></p><h2 id="操作数据库的api‘"><a href="#操作数据库的api‘" class="headerlink" title="操作数据库的api‘"></a>操作数据库的api‘</h2><h2 id="创建一条数据并保存到自己的数据库中"><a href="#创建一条数据并保存到自己的数据库中" class="headerlink" title="创建一条数据并保存到自己的数据库中"></a>创建一条数据并保存到自己的数据库中</h2><p>1.创建数据模板。</p><p>实际上这里定义的是collections中的document的结构，名为Schema。只需要指定字段名和类型及一些规则即可。</p><p><code>const Schema = mongoose.Schema()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        unique:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    author:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    price:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果需要在<code>Schema</code>定义后添加其他字段，可以使用<code>add()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.add(&#123; <span class="attr">name</span>: <span class="string">'string'</span>, <span class="attr">color</span>: <span class="string">'string'</span>, <span class="attr">age</span>: <span class="string">'number'</span> &#125;);</span><br></pre></td></tr></table></figure><p>2.发布模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyModel = mongoose.model(单数大写字母, 创建的schema实例);</span><br><span class="line"><span class="comment">// 以上为例。</span></span><br><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">"User"</span>,UserSchema);</span><br></pre></td></tr></table></figure><p>3.以发布的模板为基础生成一条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user1  = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    title:<span class="string">"玫瑰红葡萄干"</span>,</span><br><span class="line">    author:<span class="string">"维利康食品有限公司"</span>,</span><br><span class="line">    price:<span class="string">"23"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.保存该数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user1.save();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识MongoDB</title>
      <link href="/2019/07/25/%E5%88%9D%E8%AF%86MongoDB/"/>
      <url>/2019/07/25/%E5%88%9D%E8%AF%86MongoDB/</url>
      
        <content type="html"><![CDATA[<p>数据库的必要：浏览器都是在内存中运行断电数据会丢失。</p><ul><li><p>一数据库的分类</p><ul><li>关系型数据库<ul><li>MySQL、Oracle、DB2</li><li>数据库中都是表</li></ul></li><li>非关系型数据库<ul><li>MongoDB、Redis</li><li>键值对数据库</li><li><strong>文档数据库</strong>MongoDB</li></ul></li></ul><a id="more"></a></li><li><p>MongoDB</p><p><img src="https://i.loli.net/2019/07/26/5d3a5a257eba566659.png" alt></p><ul><li>数据模型面向文档，是一种类似于JSOn的结构。</li><li>三个概念<ul><li>数据库：数据库是一个仓库，在仓库中存放集合</li><li>集合：集合类似于数组，在集合中可以存放文档。</li><li>文档：文档数据中的最小单位，我们操作和存储的都是最小文档。</li></ul></li></ul></li><li><p>启动数据库</p><ul><li><p>1.安装</p></li><li><p>2.配置环境变量</p><p>将安装目录 配置到 path 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MongoDB\Server\<span class="number">3.4</span>\bin</span><br></pre></td></tr></table></figure><p>将这条地址增加到 path变量下</p></li><li><p>3.C盘新建 数据文件 data，data中再新建文件db</p></li></ul></li></ul><ul><li><p>4.命令行输入 <code>mongod</code> 启动（<strong>启动服务器</strong>）：用来保存数据</p><p><img src="https://i.loli.net/2019/07/26/5d3a5a4bf001e43889.png" alt="1564024593929"></p></li><li><p>显示 启动成功</p></li><li><p>5.再重新打开cmd 输入<code>mongo</code> （<strong>启动客户端</strong>）：用来操作数据</p><p>显示connecting：xxx，连接MongoDB成功。</p><p>在 C盘data文件夹下的db文件中会生成一系列文件。</p><p><img src="https://i.loli.net/2019/07/26/5d3a5a61d429e32361.png" alt="1564025630211"></p></li></ul><p>​    因为每次都要开启mongodb 的服务器和客户端，比较繁琐。</p><p>​    ——将MongoDB设置为系统服务</p><ul><li><p>指令学习</p><ul><li><p>前提知识：MongoDB 不需要提前创建数据库和集合，在创建文档的时候回一并创建。</p></li><li><p><code>db</code> 显示当前位置所在的数据库，类似于 this</p></li><li><p><code>use 数据库名</code> 进入到执行的数据库中（因为不需要提前创建数据库，所以即使进入一个新的数据库也不会报错，而是会显示<code>switch to db newdb</code> ，但是因为是新建的为空，所以在 <code>show dbs</code>的时候并不会显示该新建的）</p></li><li><p><code>show dbs</code> 即<code>show databases</code> 显示所有的数据库</p></li><li><p><code>show collections</code> 显示所有集合</p></li><li><p>数据库CRUD的操作</p><ul><li><p>1.向数据库中插入文档：<code>db.集合名.insert(doc)</code>  其中 doc可以为一个对象；</p><p>​    <strong>拓展：</strong></p><ul><li>1.<code>db.collection.insertOne()</code> 插入一个文档</li><li>2.<code>db.collection.insertMany()</code> 插入<strong>多个</strong>文档</li></ul></li><li><p>2.查询: </p><ul><li>1.查询集合中所有的文档：<code>db.集合名.find()</code>  或者 <code>db.集合名.find({})</code>  </li><li>2.查询集合中符合条件的文档：<code>db.集合名.find({属性：值})</code>  找到属性和值都对应的文档 </li><li>3.获取该集合中所有文档的数量：<code>db.集合名.find({}).count()</code> </li></ul></li><li><p>3.修改</p><ul><li><p>完全修改<code>db.collection.update(&quot;查询条件&quot;：{xxx})</code>  <strong>注意：这里的新对象是完全替换 查询条件查询出的 旧对象。</strong></p><p><code>db.collection.update(&quot;查询条件&quot;：{xxx})</code> 是 更新1/更新多的 综合语句。默认情况下是更新1，当 将默认属性<code>multi</code> 改为<code>true</code>的时候，就会修改多个</p><p> <code>db.collection.update(&quot;查询条件&quot;：{xxx},{multi:true})</code></p></li><li><p>部分修改，仅仅修改指定的属性：<code>db.collection.update(&quot;查询条件&quot;：{ $set:{ }})</code>  。在<code>$set:{}</code> 也可以通过增加新的属性来<strong>新增该文档的新属性</strong>;</p></li><li><p><strong>同时修改多个</strong>符合条件的文档：<code>db.collection.updateManay()</code> </p></li><li><p>修改一个符合条件的文档：<code>db.collection.updateOne()</code></p></li><li><p>替换：<code>db.collection.replaceOne()</code></p></li></ul></li><li><p>4.删除</p><ul><li>1.删除某个文档的指定属性：<code>db.collection.update(&quot;查询条件&quot;：{ $unset:{xxx }})</code></li><li>2.删除文档<ul><li><code>db.collection.remove(条件)</code> 默认删除一个；<code>db.collection.remove(条件，true)</code> 删除多个；<code>db.collection.remove({})</code> 传递一个空对象，会删除所有的文档（删除某集合：<code>db.集合名.drop()</code>）</li><li><code>db.collection.deleteOne()</code></li><li><code>db.collection.deleteMany()</code></li></ul></li></ul></li></ul></li></ul></li><li><p>使用可视化工具：mongodbmanagefree</p><ul><li><p>安装选择默认配置进入。如果数据库连接成功，会直接连接到localhost:27017接口</p><p><img src="https://i.loli.net/2019/07/26/5d3a5a783dd8780573.png" alt="1564033826651"></p></li></ul></li></ul><ul><li><p>在项目中使用MongoDB</p><ul><li><p>原始的MongoDB 缺乏约束。</p></li><li><p>Mongoose：</p><ul><li>优点：<ul><li>为文档创建一个模式结构</li><li>对模型中的对象/文档进行验证</li><li>可以使用中间件来与业务逻辑挂钩</li><li>比原生MongoDB更容易驱动</li></ul></li><li>新的对象<ul><li><strong>Schema</strong>（模式对象）：定义约束了数据库中的文档结构</li><li><strong>Model</strong>：作为集合中所有文档的表示，相当于MongoDB中的集合collection</li><li><strong>Document</strong>：表示集合中的具体文档，相当于集合中一个具体的文档。</li></ul></li></ul></li><li><p>使用</p><ul><li><p>1.安装mongoose、nodemon（至于为啥在nodejs课程里面有讲到）</p></li><li><p>2.配置<code>scripts</code></p><p><code>&quot;start&quot;: &quot;nodemon ./bin/www&quot;</code></p></li><li><p>3.执行：</p><p><code>npm start</code></p><p><strong>js代码部分</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/stus'</span>);</span><br><span class="line">mongoose.connection.once(<span class="string">"open"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1111111'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; @ start C:\Users\ASUS\Desktop\testmongoose</span><br><span class="line">&gt; nodemon ./bin/www</span><br><span class="line"></span><br><span class="line">[nodemon] <span class="number">1.19</span><span class="number">.1</span></span><br><span class="line">[nodemon] to restart at any time, enter <span class="string">`rs`</span></span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting <span class="string">`node ./bin/www index.js`</span></span><br><span class="line">(node:<span class="number">1248</span>) DeprecationWarning: current URL string parser is deprecated, and will be removed <span class="keyword">in</span> a future version. To use the <span class="keyword">new</span> parser, pass option &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125; to MongoClient.connect.</span><br><span class="line"><span class="number">1111111</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>生成文档</p><p>js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.将 mongoose.Schema 赋值给一个变量 </span></span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="comment">// 2.创建Schema（模式）的对象</span></span><br><span class="line"><span class="keyword">var</span> stuSchema = <span class="keyword">new</span> Schema((&#123;</span><br><span class="line">    <span class="comment">// 定义文档中数据的类型</span></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    age:<span class="built_in">Number</span>,</span><br><span class="line">    address:<span class="built_in">String</span>,</span><br><span class="line">    gender:&#123;</span><br><span class="line">        <span class="comment">// 设置默认值</span></span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">"female"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 3.创建Model ，Model代表着数据库中的集合，通过Model才能对数据库进行操作</span></span><br><span class="line"><span class="comment">// mongoose.model(modelName,schema)</span></span><br><span class="line"><span class="comment">// modelName 指的是映射的集合名</span></span><br><span class="line"><span class="comment">// StuModel 差不多是构造函数</span></span><br><span class="line"><span class="keyword">var</span> StuModel = mongoose.model(<span class="string">"students"</span>,stuSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建文档,向数据库中插入</span></span><br><span class="line"><span class="comment">// StuModel.create(doc,function(err)&#123;&#125;);</span></span><br><span class="line">StuModel.create(&#123;</span><br><span class="line">    name:<span class="string">"孙悟空"</span>,</span><br><span class="line">    age:<span class="number">90</span>,</span><br><span class="line">    gender:<span class="string">"male"</span>,</span><br><span class="line">    address:<span class="string">"花果山"</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"插入成功"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>控制台输出：</p><p><img src="C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1564045639556.png" alt="1564045639556"></p><p>manager工具打开可以显示所有的文档查看一下</p><p><img src="https://i.loli.net/2019/07/26/5d3a5a918c5d347259.png" alt="1564045606722"></p></li></ul><p>​    说明 文档是 新建并且新增进数据库成功的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swiper-移动端触摸滑动组件</title>
      <link href="/2019/07/24/Swiper-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%A7%A6%E6%91%B8%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2019/07/24/Swiper-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%A7%A6%E6%91%B8%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="swiper使用注意事项"><a href="#swiper使用注意事项" class="headerlink" title="swiper使用注意事项"></a>swiper使用注意事项</h1><h1 id="在Vue中使用"><a href="#在Vue中使用" class="headerlink" title="在Vue中使用"></a>在Vue中使用</h1><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save swiper</span><br></pre></td></tr></table></figure><p>使用</p><p>​    1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &quot;swiper/dist/css/swiper.min.css&quot;</span><br><span class="line">import &quot;swiper/dist/js/swiper.min.js&quot;</span><br></pre></td></tr></table></figure><p>2.标签引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 分页器 --&gt;</span></span><br><span class="line"><span class="regexp"> &lt;div class="swiper-pagination"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.new swiper实例，绑定需要滑动的容器class名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper(<span class="string">".swiper-container"</span>,&#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    pagination:&#123;</span><br><span class="line">        el: <span class="string">'.swiper-pagination'</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 移动端组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的slot插槽</title>
      <link href="/2019/07/24/vue%E4%B8%AD%E7%9A%84slot%E6%8F%92%E6%A7%BD/"/>
      <url>/2019/07/24/vue%E4%B8%AD%E7%9A%84slot%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<p>今天学习做外卖的时候学到一个新的知识点：插槽slot</p><p>vue模板页面中的一个小知识点，但是看了觉得好神奇！</p><p>情景：四个底部栏作为一级路由都会跳转到对于的页面，四个页面都具有顶部Top栏，但是Top栏中的组成和文字各不相同，仅仅样式一致。（组件大致相同，又有不同）</p><a id="more"></a><p><img src="https://i.loli.net/2019/07/24/5d37fc3652e8a92447.png" alt="个人主页"></p><p><img src="https://i.loli.net/2019/07/24/5d37fc5ca4d6131513.png" alt="订单列表"></p><p><img src="https://i.loli.net/2019/07/24/5d37fc76bde7687937.png" alt="home主页"></p><p><img src="https://i.loli.net/2019/07/24/5d37fc8d4457140363.png" alt></p><p>1.常见HeadTop 顶部栏组件。在四个一级路由中只有Home主页的顶部栏左、右各有一个<code>span</code>放置着一个icon 和button，其他一级路由的顶部栏只有中间的title部分，且title文字不同。</p><p>2.在 只有 Home主页具有的左右模块上 插槽 slot，因为有两个 ，使用name属性加以区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 左边的插槽空位--&gt;</span><br><span class="line">&lt;slot name=<span class="string">"left"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">    &lt;span&gt; &#123;&#123; title &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">   &lt;!-- 右边的插槽空位--&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot name="right"&gt;&lt;/</span>slot&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>3.在使用组件的时候 ，中间文字利用父子组件传值 props 过去。</p><p>4.而在Home主页中，因为一左一右，在使用组件的时候，直接将左边的icon 和右边的button 代码写入 在home组件中引用的HeadTop 组件中，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;head-top :title=<span class="string">"address"</span>&gt;</span><br><span class="line">   &lt;!-- 左边的搜索 --&gt;</span><br><span class="line">   &lt;span slot="left"&gt; icon &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 右边的登录注册 --&gt;</span><br><span class="line">   &lt;span slot="right"&gt; button &lt;/span&gt;</span><br><span class="line">&lt;/head-top&gt;</span><br></pre></td></tr></table></figure><p>并且 使用 <code>slot=&quot;name</code>值”加以区分 不同的插槽。</p><p>props传递数据，slot传递标签</p><p>注意：</p><ul><li>1.在插槽标签中<code>&lt;slot&gt;&lt;/slot&gt;</code> 放置标签元素，属于默认配置。即使用该插槽的组件未给插槽传入任何值，</li></ul><p>插槽标签中<code>&lt;slot&gt;&lt;/slot&gt;</code>  中的元素会默认显示</p><ul><li>2.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阮雪峰git-学习笔记</title>
      <link href="/2019/07/23/%E9%98%AE%E9%9B%AA%E5%B3%B0git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/23/%E9%98%AE%E9%9B%AA%E5%B3%B0git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>git保存路径：</p><p>本地文件夹/工作区域 ——暂存区域——git仓库</p><p>   1.git add 新增和修改都是使用add添加至暂存区域；</p><ol start="2"><li><p>git diff 查看修改内容</p></li><li><p>git log 查看每次提交的信息和修改内容，即版本信息</p></li></ol><a id="more"></a><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>​    1.HEAD 表示当前版本。上一个版本是 HEAD^  上上一个版本是 HEAD^^ ,简化写成HEAD~2；</p><ol start="2"><li><code>$ git reset --hard HEAD^</code>  表示回退到上一个版本，本地文件就会被回退成上一次修改之前的版本。</li></ol><p>​    当回退到旧版本时，重新 git status 的时候，就不会再显示回退之前的新的版本。</p><p>​    可以强制：</p><p>​    3.<code>$ git reset --hard &#39;需要回退的版本号&#39;</code>【每次commit都会产生一个commit id，为十六进制的数】</p><p>​    版本号不需要写全，4-5位即可，譬如：1094a</p><p>​    <code>$ git reflog</code> 显示每一次的命令语句</p><p>​    <u>大佬的总结：</u></p><ul><li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id。</code></li><li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本</li></ul><h1 id="添加文件："><a href="#添加文件：" class="headerlink" title="添加文件："></a>添加文件：</h1><p>​    <strong>git add 和 git commit</strong></p><p>​    <code>git add</code>：文件修改添加到暂存区</p><p>​    <code>git commit</code>：暂存区的所有内容提交到当前分支</p><p>​    $ git checkout – filename（注意空格）撤销工作区修改</p><p>​    $ git reset HEAD filename 可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><p>​    大佬小结</p><ul><li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file。</code></li><li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD filename</code>，就回到了场景1，第二步按场景1操作。</li><li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li></ul><p>​    2.误删了工作区的且已经commit的文件需要恢复（仅有commit 的文件误删才能被恢复）：<code>$ git checkout -- filename</code></p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><ol><li><p>当本地删除文件之后。工作区和版本库的就不一致了，<code>git status</code> 就会提示 <code>Changes not staged for commit(未准备提交的更改)</code></p><p>那么有两个选择： </p></li></ol><p>​    ①  从版本库中删除。<code>git rm</code> 并 <code>git commit</code> ，即工作区和版本库一致。</p><p>​    ② 是手滑删错了，想让工作区和版本库一致 <code>$ git checkout -- test.txt</code> 即可 恢复工作区版本。</p><p>Tip： <code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。但是：<strong>从来没有被添加到版本库就被删除的文件，是无法恢复的！</strong></p><h1 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h1><p>(前提：创建自己的github 账户，配置SSH公钥。同一个github 可以配置多个公钥，就可以是实现同一个用户异地多台电脑上传，也是 推送到远程仓库的密码)</p><p>1.关联语句执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:zyw1988/TodoList.git</span><br><span class="line"><span class="comment">// git@github.com:zyw1988/TodoList.git 是你创建的某仓库地址，TodoList是仓库名</span></span><br></pre></td></tr></table></figure><p>2.推送</p><p><code>git push</code></p><p><code>git push -u origin master</code> 如果是第一次推送，远程仓库是空的，使用 <code>-u</code> 在之后的推送就可以直接使用 <code>git push origin master</code> 代替<code>git push -u origin master</code></p><h1 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h1><p>1.克隆语句执行</p><p><code>git clone 地址</code> </p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片md示例</title>
      <link href="/2019/07/23/3.%E5%9B%BE%E7%89%87md%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/07/23/3.%E5%9B%BE%E7%89%87md%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/07/23/5d366da8ea8fc53681.png" alt="运动函数"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的VUE初识</title>
      <link href="/2019/07/22/%E6%88%91%E7%9A%84VUE%E5%88%9D%E8%AF%86/"/>
      <url>/2019/07/22/%E6%88%91%E7%9A%84VUE%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>如果说 jq是简化了对DOM 的操作，那么vue就是完全解放了双手（也不，底层DOM vue中也是可以获取到并操作的）</p><h1 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h1><p>当需要把一个页面使用Vue框架搭建的时候，需要创建VUE实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中，el 是指代需要VUE搭建的区域id</p><a id="more"></a><h2 id="1-data："><a href="#1-data：" class="headerlink" title="1.data："></a>1.data：</h2><p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时 data 中存在的属性才是响应式的</p><ul><li>模板语法：data中的变量通过花括号文本插值</li></ul><h2 id="2-指令："><a href="#2-指令：" class="headerlink" title="2.指令："></a>2.指令：</h2><p>当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><h3 id="1双向绑定：v-model"><a href="#1双向绑定：v-model" class="headerlink" title="1双向绑定：v-model"></a>1双向绑定：v-model</h3><p><code>v-model=&quot;data1&quot;</code> 。一般用于input、textarea、select、checkbox、radio等表单元素。注明 初始值。</p><p>动态属性赋值：<code>v-bind:xxx=&quot;data1&quot;</code>  简写：<code>:xxx=&quot;data1&quot;</code></p><h4 id="1、style-的动态绑定："><a href="#1、style-的动态绑定：" class="headerlink" title="1、style 的动态绑定："></a>1、style 的动态绑定：</h4><ul><li><p><code>:style=&quot;{color:ActiveColor,fontSize:fontsize+&#39;px&#39;}&quot;</code></p></li><li><p>布尔值判定：<code>:style=&quot;{ color:isFlag?&quot;#000&quot;:&quot;#fff&quot; }&quot;</code></p></li><li><p>需要拼接单位的<code>:style=&quot;{width:width+&#39;px&#39;,height:height+&#39;px&#39;}&quot;</code></p></li></ul><h4 id="2、-class动态绑定"><a href="#2、-class动态绑定" class="headerlink" title="2、 class动态绑定"></a>2、 class动态绑定</h4><p>在项目中<code>class</code> 属性经常会被修改，会使用动态绑定一个变量的方法来控制class</p><ul><li><p>1.绑定单个变量</p><p><code>:class=&quot;className&quot;</code> 如果是 <code>:class=&quot;&#39;RedColor&#39;&quot;</code> 内部用单引号<code>&#39;&#39;</code>包裹是引用的常量<code>RedColor</code></p></li><li><p>2.绑定多个 class变量</p><p><code>:class=&quot;[&#39;classA&#39;,&#39;classB&#39;]&quot;</code></p></li><li><p>3.通过布尔值控制class类名的绑定：</p><ul><li><p>① 与变量判断是否相等</p><p><code>:class=&quot;{classA:isChoose==&quot;xxx&quot;}&quot;</code></p><p>多个：逗号隔开</p><p><code>:class=&quot;{&#39;full&#39;:item.name==&#39;满减&#39;,&#39;first&#39;:item.name==&#39;首单&#39;,&#39;special&#39;:item.name==&#39;特价&#39;}&quot;</code></p></li><li><p>②直接布尔值控制</p><p><code>:class=&quot;{ classA:isA,classB:isB}&quot;</code></p></li><li><p>③和三目运算符一起使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; x&gt;y?'classA':'classB'&#125;"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2事件绑定：v-on"><a href="#2事件绑定：v-on" class="headerlink" title="2事件绑定：v-on"></a>2事件绑定：v-on</h3><p><code>v-on:click=&quot;clickEvent&quot;</code> 简写：<code>@click=&quot;ckickEvent&quot;</code></p><p>列表渲染：<code>v-for=&quot;item in lists&quot;</code>。vue2之后需要在v-for之后动态绑定上id<code>:key=&quot;item.id&quot;</code> 。这里的lists 可以是一个对象，数组或者是 常量</p><p>通过 <code>v-for</code> 循环得到的组件，如果要加 过度动画<code>transition</code> 应该使用标签<code>&lt;transition-group&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"item in 5"</span>&gt;&#123;&#123; item &#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">输出：</span></span><br><span class="line"><span class="regexp">·1</span></span><br><span class="line"><span class="regexp">·2</span></span><br><span class="line"><span class="regexp">·3</span></span><br><span class="line"><span class="regexp">·4</span></span><br><span class="line"><span class="regexp">·5</span></span><br></pre></td></tr></table></figure><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li>1.<code>.lazy</code>不会在input时更新，而是在change时更新</li><li>2.<code>.trim</code>自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</li><li>3.<code>.number</code>自动将用户的输入值转为数值类型</li><li>4.<code>.stop</code>停止事件冒泡</li><li>5.<code>.prevent</code>阻止默认行为 a的自动跳转</li><li>6.<code>.enter</code> <code>.esc</code> 或者<code>.13</code> 指代特定的键盘事件 ，跟在<code>keyup（keydown）</code>之后</li></ul><h2 id="3-methods："><a href="#3-methods：" class="headerlink" title="3.methods："></a>3.methods：</h2><p>操作数据修改dom的方法对象</p><p>(待补充)</p><h2 id="4-computed："><a href="#4-computed：" class="headerlink" title="4.computed："></a>4.computed：</h2><p>计算属性。实际也是方法，但是计算属性的调用和属性类似。</p><p>应用场景：当需要 对数据进行处理 且多次使用的时候（有待深入）</p><p>1.有get 和set 两个方法。默认是调用get方法。get只读属性，set 是设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> fullname:&#123;</span><br><span class="line">     <span class="keyword">set</span>:function()&#123;&#125;,</span><br><span class="line">     <span class="keyword">get</span>:function()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认是 调用get方法，所以可以简略写成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fullname:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>2.set方法是设置值的，所以 在set方法中可以通过形参获取到 需要被赋值的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fullname:&#123;</span><br><span class="line">     <span class="keyword">set</span>:function(newVul)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'新的值'</span>,newVul)</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">get</span>:function()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-watch："><a href="#5-watch：" class="headerlink" title="5.watch："></a>5.watch：</h2><p>侦听属性，侦听某个变量的改变，以该变量名为函数名，创建函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">data:&#123; <span class="attr">msg</span>:<span class="string">""</span>&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">    msg:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'msg发生了改变'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（有待深入，watch的变量只能是data中定义的么，定义任何类型的数值都是一样的吗？）</p><h2 id="6-filter过滤器："><a href="#6-filter过滤器：" class="headerlink" title="6.filter过滤器："></a>6.filter过滤器：</h2><p>注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'msgFilter'</span>,function(msg)&#123;</span><br><span class="line">    <span class="comment">// Vue.filter('过滤器名称',函数)</span></span><br><span class="line">    <span class="keyword">return</span> msg.replace(<span class="string">'a'</span>,<span class="string">'ccc'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;&#123;&#123; item|msgFilter&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-自定义指令"><a href="#7-自定义指令" class="headerlink" title="7.自定义指令"></a>7.自定义指令</h2><p>(待完善)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.redirect()</span><br></pre></td></tr></table></figure><h2 id="8-过渡和动画"><a href="#8-过渡和动画" class="headerlink" title="8.过渡和动画"></a>8.过渡和动画</h2><ul><li><p>定义和区别：之前的过渡是在CSS中使用属性<code>transition</code> 给元素设置过渡的要素。在Vue中需要使用 标签形式的<code>transition</code> 将需要过渡的元素包裹。</p></li><li><p>包含进入和离开两场动画，分别是enter进入有 <code>v-enter</code> <code>v-enter-to</code>   离开leave 有<code>v-leave</code> <code>v-leave-to</code>  。</p><p><img src="https://i.loli.net/2019/07/27/5d3c52367baa820837.png" alt></p></li><li><p>使用：</p><ul><li>1.将需要过渡的组件用标签形式的transition包裹 <code>&lt;transition&gt; ... &lt;/transiton&gt;</code></li><li>2.从过渡的变化过程可以看到，<code>v-enter</code> 和<code>v-leave-to</code> 的效果是一样的，而<code>v-enter-to</code>和<code>v-leave</code>是一样的。所以①在CSS中 定义 <code>v-enter</code>和 <code>v-enter-to</code> 的动画效果即可。②通过<code>v-enter-active</code> 和<code>v-leave-active</code> 定义整场动画的时间</li></ul></li><li><p>半场动画（<strong>案例：加入购物车小球的下落动画</strong>）</p><p>是一个只需要进入，不需要离开的动画效果，使用钩子函数控制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">    @before-enter=<span class="string">"handleBeforeEnter"</span></span><br><span class="line">    @enter=<span class="string">"handleEnter"</span></span><br><span class="line">    @after-enter=<span class="string">"handleAfterEnter"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ball"</span> v-<span class="keyword">if</span>=<span class="string">"isflag"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    </span><br><span class="line">&lt;<span class="regexp">/transition&gt;</span></span><br></pre></td></tr></table></figure><p>操作函数部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> beforeEnter:<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.style.transform=<span class="string">"translate(0,0)"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line"> enter:<span class="function"><span class="keyword">function</span> (<span class="params">el,done</span>) </span>&#123;</span><br><span class="line">       el.offsetWidth</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取小球 的距离.因为各种设备的大小不同，固定数值会出现差错。所以从位移差入手。</span></span><br><span class="line">       <span class="keyword">const</span> ballPosition = <span class="keyword">this</span>.$refs.ball.getBoundingClientRect();</span><br><span class="line">       <span class="keyword">const</span> badgePosition = <span class="built_in">document</span>.getElementById(<span class="string">'mui-badge'</span>).getBoundingClientRect();</span><br><span class="line">       <span class="keyword">const</span> xDist = badgePosition.left - ballPosition.left ;</span><br><span class="line"><span class="keyword">const</span> yDist =  badgePosition.top - ballPosition.top;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 将 距离差 字符串拼接进 </span></span><br><span class="line">el.style.transform=<span class="string">`translate(<span class="subst">$&#123;xDist&#125;</span>px,<span class="subst">$&#123;yDist&#125;</span>px)`</span>;</span><br><span class="line">el.style.transition=<span class="string">"all 1s linear"</span></span><br><span class="line"><span class="comment">// 跟老师不一样的地方。</span></span><br><span class="line">el.addEventListener(<span class="string">'transitionend'</span>,done)</span><br><span class="line">        &#125;,</span><br><span class="line">afterEnter:<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flage=!<span class="keyword">this</span>.flage;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li></ul><h2 id="render渲染组件"><a href="#render渲染组件" class="headerlink" title="render渲染组件"></a>render渲染组件</h2><p>使用render 渲染会完全替换掉<code>#app div</code>，不会导致页面出现div嵌套div 的情况</p><h1 id="二、组件化"><a href="#二、组件化" class="headerlink" title="二、组件化"></a>二、组件化</h1><h2 id="1-组件的定义和使用"><a href="#1-组件的定义和使用" class="headerlink" title="1.组件的定义和使用"></a>1.组件的定义和使用</h2><p>​    可以多次复用；减少耦合；是特殊的vue实例，有自己的data和methods和computed以及生命周期钩子函数。其中 【data】必须是一个函数，且返回一个对象。</p><ul><li><p>组件的三种声明方式</p><p>1.<code>Vue.extend</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义模板字符串</span></span><br><span class="line"><span class="keyword">var</span> com1 = Vue.extend(&#123;</span><br><span class="line">    template:<span class="string">'&lt;h2&gt;我是extend 创建的组件&lt;/h2&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//利用模板字符串注册组件</span></span><br><span class="line">Vue.components(<span class="string">'myCom1'</span>,com1)</span><br><span class="line"><span class="comment">//在html中标签形式引入</span></span><br><span class="line">&lt;my-com1&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-com1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.方法1 的简化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.components(<span class="string">'myCom1'</span>,&#123;</span><br><span class="line">    template:<span class="string">'&lt;h2&gt;我是extend 创建的组件&lt;/h2&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.模板文件id的引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">"temp"</span>&gt;</span><br><span class="line">    &lt;p&gt; 略略略 &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue部分</span></span><br><span class="line">Vue.component(<span class="string">'myCom1'</span>,<span class="string">'#temp'</span>)</span><br></pre></td></tr></table></figure><p>4.单文件.vue的使用（.vue文件需要配套webpack 编译打包）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  App.vue文件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    <span class="comment">//div作为根标签，有且只能一个</span></span><br><span class="line">    ...</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>​            注意，组件模板中必然只能只有一个根标签，即template内部必须要一个根标签包裹所有的子孙标签</p></li></ul><h2 id="2-组件之间的传值"><a href="#2-组件之间的传值" class="headerlink" title="2.组件之间的传值"></a>2.组件之间的传值</h2><ul><li><h5 id="1-父子组件之间传值"><a href="#1-父子组件之间传值" class="headerlink" title="1.父子组件之间传值"></a>1.父子组件之间传值</h5><ul><li><p>1.<code>props</code> 和<code>$emit</code> </p><p><strong>父——子：</strong></p><p>动态属性绑定需要传递给子组件的值<code>:father=&quot;son&quot;</code>，子组件通过props 接收<code>props:[&quot;son&quot;]</code></p><p><strong>子——父：</strong></p><p>原理是 子组件无法直接修改由 父组件传递过来的值，需要将修改的变量再回传递给父组件，由父组件事件修改。</p><p>1.在子组件中注册事件 2，在该事件处理中通过 <code>this.$emit(fn,obj)</code>将变量内容obj 传递给fn函数。3.在父组件对应该子组件的标签中绑定事件<code>@ffn=fn</code> 4.在父组件的ffn事件中获取到obj变量，对数据进行操作。</p><p>父：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mt-button @fnn=<span class="string">"fn"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">mt-button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mtButton组件--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"iconfont sousuo"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">&lt;button @click=<span class="string">"clickEvent"</span>&gt;button&lt;button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">             clickEvent()&#123;</span><br><span class="line">                 <span class="keyword">this</span>.$emit(fn)</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li><p>2.<code>$children</code>/<code>$refs</code> 和<code>$parent</code> </p><p>访问子组件的应急方法，用于直接获取子组件的data数据和methods方法。</p><p><code>this.$children</code> 是一个数组类型，包含所有的子组件对象</p></li></ul><ul><li><p><code>Provide</code>和<code>reject</code> </p><p>允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p><p><strong>缺点：</strong>一对多必然导致多个组件使用同一个数据的时候导致追踪使用情况困难。</p><ul><li><p>使用步骤</p><p>1.父级通过privode提供变量，该<code>privode</code> 是一个对象 或者是返回对象的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provide:&#123;</span><br><span class="line">    <span class="string">'msg'</span>:<span class="string">"I am Dadd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>2.子组件或者孙子组件通过inject获取，`inject`是一个字符串数组或者一个对象，对象中包含from和default默认值。from属性是provide里对应的对象名，default属性是不存在时的默认值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组，变量名为 父级中声明的变量名</span></span><br><span class="line">inject:[<span class="string">"msg"</span>];</span><br><span class="line"><span class="comment">//对象，key为本组件中变量名，value 是provide中对应的对象名，也可以是一个对象，</span></span><br><span class="line">inject：&#123;</span><br><span class="line">    <span class="string">"sonMsg"</span>:<span class="string">'msg'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value为一个对象</span></span><br><span class="line">inject:&#123;</span><br><span class="line">    <span class="string">"sonmsg"</span>:&#123;</span><br><span class="line">        <span class="keyword">from</span>:<span class="string">'msg'</span></span><br><span class="line">        <span class="keyword">default</span>:<span class="string">'I am son1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>子组件在接收到provide的数据之后，在data中注册之后再能使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        Sonmsg:<span class="keyword">this</span>.msg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">inject:&#123;</span><br><span class="line">     <span class="string">"sonmsg"</span>:&#123;</span><br><span class="line">        <span class="keyword">from</span>:<span class="string">'msg'</span></span><br><span class="line">        <span class="keyword">default</span>:<span class="string">'I am son1'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>Vuex：集成式状态管理，始用于大型开发，另开一题详解，</li></ul><h1 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h1><h2 id="1-路由的定义和使用"><a href="#1-路由的定义和使用" class="headerlink" title="1.路由的定义和使用"></a>1.路由的定义和使用</h2><p>控制页面的跳转</p><p>1。安装：<code>npm install vue-router</code></p><p>2。生成VueRouter 实例并定义路径规则：<code>var router = new VueRouter({routes:[{...},{...},{...}]})</code> </p><p>3。挂靠到Vue实例上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4。在html页面中 放置 路由链接和路由显示的界面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/login"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">&lt;router-link to=<span class="string">"/register"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;router-view &gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>5.为路由设置默认显示，即当 ‘/‘ 默认页面显示的路由组件内容.</p><p>即将 “/“的地址通过redirect 重定向到 “/Login” 这个页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">redirect</span>:<span class="string">"/login"</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">"/login"</span>,<span class="attr">component</span>:<span class="string">"Login"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果是使用规则定义的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">component</span>:<span class="string">"/login"</span>&#125;</span><br></pre></td></tr></table></figure><p>会导致hash 混乱（具体咋混乱咱也不知道）</p><p>6。路由链接本质是 a标签，被点击会有 active 样式，可以在CSS中手动设置，路由VueRouter 也提供 <code>linkActiveClass</code> 为路由增加被点击的样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">redirect</span>:<span class="string">"/login"</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">"/login"</span>,<span class="attr">component</span>:<span class="string">"Login"</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    linkActiveClass:<span class="string">"active"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>“active” 为CSS中手动设置的样式</p><h2 id="2-路由的传值"><a href="#2-路由的传值" class="headerlink" title="2.路由的传值"></a>2.路由的传值</h2><ul><li><p>主要分两种，params 和query。</p></li><li><p>路由的 to属性一半默认写法都是字符串形式<code>&lt;router-link to=&quot;/home&quot;&gt;&lt;/router-link&gt;</code> ，但其实也可以用过 对象传值的方式，只需要将to属性动态绑定：<code>&lt;router-link :to=&quot;{path:&#39;/home&#39;}&quot;&gt;&lt;/router-link&gt;</code>。 这样的话如果要传值就可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 query</span></span><br><span class="line">  &lt;router-link :to=<span class="string">"&#123;path:'/home',query:&#123; key: value &#125;&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>query</strong>，查询字符串传值：<code>&quot;/login?id=10&quot;</code> 类似于get传值，通过<code>？</code>传递参数，不需要额外配置路由格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 普通传值 ？拼接</span></span><br><span class="line">&lt;router-link to=<span class="string">"/login?id=1065889489&gt; 进入login 组件&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">//1.1 普通传值 对象形式</span></span><br><span class="line"><span class="string">&lt;router-link :to="</span>&#123;<span class="attr">path</span>:<span class="string">'/home'</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">1065889489</span>&#125;&#125;<span class="string">"&gt;&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 2.动态传值，用在v-for循环中，将每个item 的id 传给to后的值</span></span><br><span class="line"><span class="string">&lt;router-link  :to="</span>&#123;<span class="attr">path</span>:<span class="string">'/shop/'</span>+item.id &#125;<span class="string">" v-for="</span>item <span class="keyword">in</span> obj<span class="string">"&gt; 进入login 组件&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>this.$route.query</code> 获取到<code>?</code>后跟随的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">控制台输出<span class="keyword">this</span>.$route 会显示：</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    fullPath:<span class="string">"/login/1065889489"</span>,</span><br><span class="line">    hash:<span class="string">""</span>,</span><br><span class="line">    params:&#123;&#125;,</span><br><span class="line">    path:<span class="string">"/login"</span>,</span><br><span class="line">    query:&#123;<span class="attr">id</span>:<span class="number">1065889489</span>&#125;,</span><br><span class="line">    __proto__:<span class="built_in">Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>query</code> 会输出一个对象</p></li><li><p><strong>params</strong>  通过<code>/</code>传值，需要修改路由中的路径规则，配置路由格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">'/login/:id/:name'</span>,<span class="attr">component</span>:Login&#125;</span><br></pre></td></tr></table></figure><p>当点击路由跳转的时候，网页地址就会变成  xxxxx/login/10/zyw</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/login/10/zyw"</span>&gt; 进入login 组件&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/动态赋值</span></span><br><span class="line"><span class="regexp">&lt;router-link :to="&#123;path:'/</span>shopsinfo/<span class="string">'+item.id &#125;"&gt; 进入login &lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>this.$route.params</code> 获取，<code>params</code> 获取到的是一个对象形式数据</p></li></ul><h2 id="3-路由变量"><a href="#3-路由变量" class="headerlink" title="3.路由变量"></a>3.路由变量</h2><ul><li><p>1.<code>this.$route</code>（有待完善）</p><p> 是<strong>当前活跃的路由对象</strong>，可以获取当前路由的路径query、params、meta等参数</p></li><li><p>2.<code>this.$router</code> </p><p>是<strong>VueRouter的一个实例对象</strong>，包含history对象，使用<code>this.$router.push()</code> 可以进行路由页面跳转；<code>this.$router.go(-1)</code> 返回上一个页面;<code>this.$router.replace(&#39;/login&#39;)</code> push是可以返回上一个的，replace是不可以返回的</p></li></ul><h2 id="4-多级路由定义和使用"><a href="#4-多级路由定义和使用" class="headerlink" title="4.多级路由定义和使用"></a>4.多级路由定义和使用</h2><p>实现多级组件嵌套的效果</p><ul><li><p>1.在需要嵌套多级子路由的路径下，增加属性：<code>children</code> ，为一个数组格式。在其中增加子路由的路径规则：<code>{path:&quot;/son1&quot;,component:Son}</code> 。因为是设置在当前路径之下的子路由路径，所以 不用加上当前的路由路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">"login/son1"</span>,<span class="attr">component</span>:Son &#125;;<span class="comment">// 错误，默认就是 /logn 之下的路径</span></span><br><span class="line">&#123; <span class="attr">path</span>:<span class="string">"/son1"</span>,<span class="attr">component</span>:Son &#125;；<span class="comment">//正确</span></span><br></pre></td></tr></table></figure></li><li><p>2.在增加了路径之后，同样需要 增加路由标签和划定区域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">"/login/son1&gt; 进入son1 子组件&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">&lt;router-link to="</span>/login/son2&gt; 进入son2 子组件&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">&lt;router-view&gt;&lt;/</span>router-view&gt;</span><br></pre></td></tr></table></figure><p>注意：在子路由标签中的<code>to=&quot;&quot;</code> 之后是需要加上 父级路由的路径的。</p></li></ul><h2 id="5-命名视图"><a href="#5-命名视图" class="headerlink" title="5.命名视图"></a>5.命名视图</h2><p>功能分析：路由由 router-view展示，当在地址不变的情况下，同时展示 三个及以上路由，这就需要用到 命名视图</p><h2 id="6-编程式导航"><a href="#6-编程式导航" class="headerlink" title="6.编程式导航"></a>6.编程式导航</h2><p>导航一般是通过路由的to跳转，在这里介绍导航的另一种方式：编程式导航。</p><p>要点：利用<code>click</code>点击事件 +   <code>this.$router.push()</code>方法。</p><p>1.直接跳转</p><p><code>this.$router.push(‘/home/goodsinfo”);</code></p><p>2.<code>/</code>传递参数的方法</p><p><code>this.$router.push(“/home/goodsinfo/”+id );</code></p><p>3.传递对象的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123; </span><br><span class="line">Name :<span class="string">"goodsinfo"</span>,</span><br><span class="line">Params : &#123; <span class="attr">id</span>:id_x &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.<code>replace</code> 也是直接跳转，与<code>push</code> 的区别在于，<code>push</code> 过去的网址还能返回到前一个，而<code>replace</code> 是无法返回。</p><p><code>this.$router.replace(&quot;/home&quot;);</code></p><ul><li><p>7.路由懒加载：在一个页面呈现的时候，不需要让所有的路由接口都加载，只有点击的时候再去加载，能促进高校</p><p> ​    使用方式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'../../components/Home.vue'</span>)</span><br><span class="line"><span class="comment">//也可以直接在 路由规则中写入</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VurRouter(&#123;</span><br><span class="line">    routers:[</span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">"/home"</span>,<span class="attr">component</span>:<span class="keyword">import</span>(<span class="string">'../../components/Home.vue'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-路由中其他的一些功能："><a href="#7-路由中其他的一些功能：" class="headerlink" title="7.路由中其他的一些功能："></a>7.路由中其他的一些功能：</h2><p>1.打开页面默认显示 某个子组件：在一级路由规则中 另外定义 redirect</p><p>2.在Vue中使用DOM元素</p><ul><li>1.为标签元素增加属性<code>ref=&quot;xxx&quot;</code> ，通过<code>this.$refs.xxx</code> 能获取到DOM元素。该方法也能用于组件，获取到组件的data 和methods</li><li>2.在methods中定义的方法，如果使用的时候未传参，那么在申明的时候的形参ele即指代执行函数的底层DOM，未传参时候的默认参数</li></ul><h1 id="四、生命周期钩子函数"><a href="#四、生命周期钩子函数" class="headerlink" title="四、生命周期钩子函数"></a>四、生命周期钩子函数</h1><p><img src="https://i.loli.net/2019/07/29/5d3e6a6d55a7d34457.png" alt></p><ul><li><h3 id="Vue脚手架（webpack手动配置的基础上）"><a href="#Vue脚手架（webpack手动配置的基础上）" class="headerlink" title="Vue脚手架（webpack手动配置的基础上）"></a>Vue脚手架（webpack手动配置的基础上）</h3></li></ul><h1 id="五、Vuex"><a href="#五、Vuex" class="headerlink" title="五、Vuex"></a>五、Vuex</h1><ul><li>定义：</li></ul><p><img src="https://i.loli.net/2019/07/29/5d3eaeed4dddb57354.png" alt></p><ul><li><p>State:状态，可以简单理解为data</p></li><li><p>View：视图层</p></li><li><p>Actions：用户的各种操作，</p><p>作为插件，在安装、导入之后，需要<code>Vue.use(Vuex)</code></p></li><li><p>核心概念：</p><ul><li><p>state：</p><p>单一状态树：</p></li><li><p>mutation：跟踪同步的操作，内部方法默认形参state。是Vuex的store状态的更新唯一方法。</p><ul><li>Mutation主要包括两部分：</li></ul><p>​        1.字符串的事件类型：type</p><p>​        2.回调函数（handler），该回调函数的第一个参数就时 state</p><ul><li><p>mutation的定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mutations:&#123;</span><br><span class="line">    increment(state)&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部传参形式</span></span><br><span class="line">increment(state,count)&#123;</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>- 通过mutation更新  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">increment:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外部传参形式</span></span><br><span class="line">increment:<span class="function"><span class="keyword">function</span>(<span class="params">newVul</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//注意，这里的newVul 包括了type和newVul，会自发形成一个对象传过去，所以传过去使用外部参数的时候需要通过对象的形式 获取一下</span></span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>,newVul)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特殊的传参方式</span></span><br><span class="line">increment:<span class="function"><span class="keyword">function</span>(<span class="params">newVul</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(&#123;</span><br><span class="line">        type:<span class="string">'increment'</span>,</span><br><span class="line">        newVul:newVul</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>actions：异步操作，譬：网络请求，在actions中定义了异步操作再在mutation中修改状态</p></li><li><p>getters：数据的变换操作，简单理解为computed</p><p>在getters中的方法默认带参数<code>state</code> ，如果另外传入 形参<code>getters</code> 能获取到所有的getters方法。且所有方法最多只能有两个参数，即state 和getters。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">state:&#123;</span><br><span class="line">    students:[</span><br><span class="line">        &#123; <span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'zs1'</span>,<span class="attr">age</span>:<span class="number">90</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'zs2'</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">'zs3'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">getters:&#123;</span><br><span class="line">    msgFilter(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.students.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.age&gt;<span class="number">20</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    msgFIlterLength(state,getters)&#123;</span><br><span class="line">        <span class="keyword">return</span> getters.msgFilter.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过 形参getters 能获取到所有的getters 方法，对于计算步骤一致的方法就能通过 getters.xx的方式调用而避免重复代码</span></span><br></pre></td></tr></table></figure><p>如果在调用getters中的方法时想要额外传入外部参数。则要求 getters的方法返回一个函数，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能实现，输出 大于外部参数age 的students</span></span><br><span class="line">getters:&#123;</span><br><span class="line">    getAge(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.student.filter(<span class="function"><span class="params">s</span>=&gt;</span>s.age&gt;age)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 形参age为 外部调用传入的数据</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>module：按模块划分数据</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> 初级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hexo美化自己的个人博客</title>
      <link href="/2019/07/22/2.%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E7%BE%8E%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/22/2.%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E7%BE%8E%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍及用途"><a href="#1-介绍及用途" class="headerlink" title="1.介绍及用途"></a>1.介绍及用途</h1><ul><li>基于 node.js 制作的一个博客工具</li><li>不需要部署到服务器，在服务器上保存的其实是 基于在hexo上编写的md文章。hexo帮我们生成静态的html页面，再将html上传到我们的服务器</li><li>会用到 git命令语句</li></ul><a id="more"></a><h1 id="2-安装和初始化"><a href="#2-安装和初始化" class="headerlink" title="2.安装和初始化"></a>2.安装和初始化</h1><ul><li><p>1.安装hexo ：<code>npm install hexo-cli -g</code>  </p></li><li><p>2.初始化：<code>hexo init</code> 之后会生成一系列文件夹</p></li><li><p>3.<code>npm install</code> 安装依赖包</p></li><li><p>生成文件夹预览以及含义：</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`.├── _config.yml  ：网站的 配置 信息，您可以在此配置大部分的参数</span><br><span class="line">  ├── package.json</span><br><span class="line">  ├── scaffolds  ：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">  ├── source ：资源文件夹是存放用户资源的地方。</span><br><span class="line">  |  ├── _drafts</span><br><span class="line">  |  └── _posts ：编写的md文件存放地址</span><br><span class="line">  └── themes：主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br><span class="line">  `</span><br></pre></td></tr></table></figure></li></ul></li><li><p>与自己的github个人主页绑定（默认已经有自己的github主页）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><p>  注意：键值对中间要有空格，不然会报错。与此同时也要修改url处为自己的github个人主页地址</p><ul><li><p>初始化github绑定</p><ul><li>1.安装  hexo-deployer-git <code>$ npm install hexo-deployer-git --save</code> </li><li>2.<code>hexo d</code>部署到github 上</li></ul></li></ul><h1 id="3-常用语句"><a href="#3-常用语句" class="headerlink" title="3.常用语句"></a>3.常用语句</h1><ul><li><p>下载主题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 主题地址</span><br></pre></td></tr></table></figure></li><li><p><code>$ hexo init [folder]</code> :新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p></li><li><p>设置主题即个人特色标题和其他：</p><ul><li>1.所有的信息都在 根目录下的<code>_config.yml</code> 中 修改`</li><li>2.<code>theme</code>字段为 你克隆下来得主题名称。</li><li>3.<code>title</code>：网站标题</li><li>4.<code>subtitle</code>：网站副标题</li><li>5.<code>description</code> ：网站描述，用于SEO</li><li>6.<code>author</code>：博主的名字</li><li>7.<code>avator</code>:侧边栏头像设置</li></ul></li><li><p><code>hexo clean</code> ：清除缓存 文件（db.json)和已生成 的静态文件（public）</p></li><li><p><code>hexo g &amp;&amp; hexo s</code> 生成静态文件并且启动服务器预览，是<code>hexo deploy</code>和 <code>hexo server</code>的简写</p></li><li><p><code>hexo  new &quot;笔记标题&quot;</code>  新建笔记，报错使用 <code>hexo new &#39;[post]&#39; &quot;标题&quot;</code> </p></li><li><p><code>hexo d</code>部署之前预先 生成的静态文件，是<code>hexo generate</code> 的简写</p></li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> github个人主页搭建 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的js 复习笔记</title>
      <link href="/2019/07/19/1.js%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/19/1.js%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JS数据格式分类"><a href="#一、JS数据格式分类" class="headerlink" title="一、JS数据格式分类"></a>一、JS数据格式分类</h2><ul><li><p>（一）JS中有5（6）种基本数据格式和1中引用类型，分别是 null，undefined，number，string，boolean，（ES6新增symbal），引用类型：Object、Array、Function、Date等</p><a id="more"></a></li><li><p>（二）通过typeOf会显示的数据类型：</p><table><thead><tr><th></th><th>显示</th></tr></thead><tbody><tr><td>null</td><td>Object（null类型被当做一个空对象引用）</td></tr><tr><td>{}</td><td>↑</td></tr><tr><td>[]</td><td>↑</td></tr><tr><td>123</td><td>Number</td></tr><tr><td>NaN</td><td>Number（注意：①任何有关NaN的计算都不等于NaN②NaN不等于任何值，包括自己）</td></tr><tr><td>’string‘</td><td>string</td></tr><tr><td>true/false</td><td>boolean</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>（三）通过instanceOff 会显示的数据类型</p></li></ul><h2 id="二、数组方法"><a href="#二、数组方法" class="headerlink" title="二、数组方法"></a>二、数组方法</h2><table><thead><tr><th></th><th>解释</th><th>返回值</th><th>原数组是否被修改</th></tr></thead><tbody><tr><td>join(separator)</td><td>将数组的元素组成一个字符串以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符</td><td>拼接过的字符串</td><td>否</td></tr><tr><td>push()</td><td>可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。</td><td>更新之后的长度</td><td>是</td></tr><tr><td>pop()</td><td>移除数组末尾最后一项，减少数组的 length 值，然后返回移除的项</td><td>被删掉的数组</td><td>是</td></tr><tr><td>shift()</td><td>删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。 无参。</td><td>被删掉的数组</td><td>是</td></tr><tr><td>unshift()</td><td>将参数添加到原数组开头，并返回数组的长度 。</td><td>更新之后的长度</td><td>是</td></tr><tr><td>sort()</td><td>按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。传入的参数是两个，return的是二者的差值，如果&gt;1则升序<img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps1.jpg" alt="img"></td><td>更新之后的数组</td><td>是</td></tr><tr><td>reverse()</td><td>反转数组项的顺序。</td><td>新数组</td><td>是</td></tr><tr><td>concat()</td><td>用于连接两个或多个数组。将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在无参数的情况下，它只是复制当前数组并返回副本。</td><td>返回新数组</td><td>否</td></tr><tr><td>slice(startIndex,endIndex)</td><td>字符串也有这个方法返回从原数组中指定开始下标到结束下标之间的项组成的新数组。会有两个参数，如果第二个参数没有则默认一直到数组最后。相当于截了一段原数组中的一段。<img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps2.jpg" alt="img"></td><td>被‘剪’出来的数组</td><td>否</td></tr><tr><td>splice(startIndex,deleteNum,new1,new2)</td><td>删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。<img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps3.jpg" alt="img"></td><td>如果删除，会返回被删除的数组。如果不是删除，则返回一个空数组[]</td><td>删除：改变原数组插入：无返回值，原数组被改变</td></tr><tr><td>indexOflastIndexOf</td><td>字符串也有这个方法。可返回某个指定的字符串值在字符串中首次出现的位置。不存在返回-1，存在位置索引。</td><td></td><td></td></tr><tr><td>forEach(f)</td><td>循环操作，参数是function</td><td>无返回值</td><td></td></tr><tr><td>map()</td><td>指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的<strong>数组。</strong></td><td>调用结果组成的数组</td><td>是</td></tr><tr><td>filter()</td><td>“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</td><td>数组</td><td>不改变原数组</td></tr><tr><td>Every()</td><td>判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</td><td></td><td></td></tr><tr><td>some()</td><td>判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</td><td></td><td></td></tr><tr><td>reduce(function(prev, cur, index, array),初始值)reduceRigth()</td><td>都会实现迭代数组的所有项，然后构建一个最终返回的值。reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。</td><td></td><td></td></tr><tr><td>findIndex(func())</td><td>找到索引</td><td>索引值</td><td></td></tr></tbody></table><h2 id="三、字符串方法"><a href="#三、字符串方法" class="headerlink" title="三、字符串方法"></a>三、字符串方法</h2><table><thead><tr><th></th><th>解释</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>返回子字符串第一次出现的位置，从startIndex开始查找，找不到时返回-1</td><td>目标字符串第一次出现的位置，或者 -1</td></tr><tr><td>lastIndexOf()</td><td>从最后往前找子字符串，找不到时返回-1（与 indexOf的区别就是开始的方向不同）</td><td></td></tr><tr><td>match()</td><td>正则匹配</td><td></td></tr><tr><td>charAt(index)</td><td>取出单独的字符串，index为字符串下标</td><td>子字符串</td></tr><tr><td>charCodeAt(index)</td><td>返回子字符串的unicode编码，</td><td>子字符串的编码值</td></tr><tr><td>substring(start,end)</td><td>截取字符串，从start开始，截取end位</td><td>子字符串</td></tr><tr><td>slice(start,end)</td><td>遇上相同</td><td>子字符串</td></tr><tr><td>split(separator,limit)</td><td>以separator为查找目标字符串，并以此为分隔符，分割开原始字符串<strong>形成数组</strong>。limit是返回的字符串个数，如果不设置则以最大的个数显示。separator设置为””，则以逗号隔开；如果separator不设置，则返回原数组。<img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps4.jpg" alt="img"></td><td>数组</td></tr><tr><td>replace</td><td>替换字符串。如果找不到目标元素则返回源字符串；并且是找到第一个目标元素就停止</td><td>返回替换之后的数组。原数组不变。</td></tr><tr><td>inclueds</td><td>表示是否找到目标字符串</td><td>布尔值</td></tr><tr><td>repeat(n)</td><td>将源字符串重复n次并拼接成一个新的字符串，如果n为0，则返回空字符串</td><td>字符串（原字符串不改变）</td></tr><tr><td>padStart()padEnd()</td><td>字符串补全长度方法，头部补全/尾部补全</td><td>（原字符串不改变）</td></tr><tr><td>substring (start,stop)</td><td>用于提取字符串中介于两个指定下标之间的字符。</td><td>返回的子串包括 start 处的字符，但不包括 stop 处的字符.如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。</td></tr><tr><td>其他的一些方法</td><td></td><td></td></tr><tr><td>parseInt</td><td>可传入两个参数。如果只有一个参数：从0位开始到非数字位结束。如果有两个参数：parseInt(a,b)，a是以b为基数的数，转化为十进制数。parseInt(10,2)—&gt;2parseInt(5,4)—-&gt;NaN 因为4作为进制基数，不可能存在比基数大的数（以2位例，都是1和0 ，不会有2和3）</td><td></td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li><p>隐形类型转换</p></li><li><p>显式类型转换</p><ul><li><p><code>parseInt(str,radix)</code> :radix指的是被解析的数字的基数。如果省略或者为0，函数会根据str的开头字母来判断:</p><ul><li><p>如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。</p></li><li><p>如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt() 的一个实现把其后的字符解析为八进制或十六进制的数字。</p></li><li><p>如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</p></li></ul></li><li><p><code>parseFloat(string):</code> 解析一个字符串，并返回一个浮点数。判断字符串的首个字符是否是数字，如果是则对字符串解析，指导数字的末端，然后以数字返回该字符串。</p></li></ul></li></ul><h2 id="四、原生基础DOM操作"><a href="#四、原生基础DOM操作" class="headerlink" title="四、原生基础DOM操作"></a>四、原生基础DOM操作</h2><table><thead><tr><th>语句</th><th>含义</th><th></th></tr></thead><tbody><tr><td>查找</td><td>docementById</td><td></td></tr><tr><td>document.getElementsByClassName</td><td>返回一个数组</td><td></td></tr><tr><td>document.getElementsByTagName</td><td></td><td></td></tr><tr><td>document.getElementsByName</td><td>根据元素的name属性查找</td><td></td></tr><tr><td>document.querySelector()</td><td>返回单个Node，IE8+(含），如果匹配到多个结果，只返回第一个。括号内可以是class ,id,标签，标签+class</td><td></td></tr><tr><td>document.querySelectorAll</td><td>返回一个 NodeList</td><td></td></tr><tr><td>获取父级节点</td><td>Node.parentNode</td><td>//返回父节点</td></tr><tr><td>Node.ownerDocument</td><td>//返回祖先节点</td><td></td></tr><tr><td>获取子节点</td><td>Node.childNodes</td><td>//返回相邻后代的元素节点和文本节点对象的集合(换行算作文本节点)</td></tr><tr><td>Node.children</td><td>//返回相邻后代的元素节点集合</td><td></td></tr><tr><td>Node.firstElementChild</td><td>//返回相邻后代第一个的元素节点</td><td></td></tr><tr><td>Node.lastElementChild</td><td>//返回相邻后代最后一个的元素节点</td><td></td></tr><tr><td>获取同级元素</td><td>Node.previousSibling</td><td>// 返回前一个节点</td></tr><tr><td>Node.previousElementSibling</td><td>返回前一个元素节点</td><td></td></tr><tr><td>Node.nextSibling</td><td>// 返回后一个节点</td><td></td></tr><tr><td></td><td>Node.nextElementSibling</td><td>返回后一个元素节点</td></tr><tr><td>创建</td><td>document.createElement</td><td>创建元素</td></tr><tr><td>document.createTextNode</td><td>创建文本节点</td><td></td></tr><tr><td>document.cloneNode (true)</td><td>克隆一个节点，它接收一个bool参数，用来表示是否复制子元素</td><td></td></tr><tr><td>document.createAttribute(“class”)</td><td>创建属性节点</td><td></td></tr><tr><td>复制节点</td><td>var newNode=Node.cloneNode(Boolean)</td><td>//Boolean:true  返回Node及其全部子孙节点    //Boolean:false 只返回Node节点</td></tr><tr><td>删除子节点</td><td>parentNode.removeChild(childNode)</td><td>//已知父节点</td></tr><tr><td>node.parentNode.removeChild(childNod)</td><td>//未知父节点</td><td></td></tr><tr><td>插入子节点</td><td>parentNode.appendChild(newNode)</td><td>//增加节点至子节点末尾</td></tr><tr><td>parentNode .insertBefore(newNode,targetNode)</td><td>//增加节点至targetNode之前</td><td></td></tr><tr><td>替换节点</td><td>replaceChild</td><td></td></tr><tr><td>子节点相关</td><td>children</td><td>所有子节点（会有文本，注释等）</td></tr><tr><td>childNodes</td><td>所有元素子节点</td><td></td></tr><tr><td>firstChild</td><td>返回第一个子节点，不存在返回null，</td><td></td></tr><tr><td>lastChild</td><td>返回最后一个子节点，不存在返回null</td><td></td></tr><tr><td>firstElementChild</td><td>返回第一个元素子节点</td><td></td></tr><tr><td>lastElementChild</td><td>返回最后一个元素子节点</td><td></td></tr><tr><td>兄弟节点</td><td>previousSibling</td><td>节点的前一个节点，如果不存在则返回null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</td></tr><tr><td>nextSibling</td><td>节点的后一个节点</td><td></td></tr><tr><td>previousElementSibling</td><td>返回前一个元素节点</td><td></td></tr><tr><td>nextElementSibling</td><td>返回后一个元素节点</td><td></td></tr><tr><td>元素属性</td><td>setAttribute</td><td>设置属性</td></tr><tr><td>getAttribute</td><td>返回 属性值</td><td></td></tr><tr><td>样式</td><td>直接 .style.样式</td><td></td></tr><tr><td>判断是否包含样式</td><td>classList.contains(‘zzz’)</td><td></td></tr><tr><td>样式的添加</td><td>classList.add()</td><td></td></tr></tbody></table><h2 id="BOM含义及使用"><a href="#BOM含义及使用" class="headerlink" title="BOM含义及使用"></a>BOM含义及使用</h2><ul><li><p>含义：浏览器对象模型。</p><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps5.jpg" alt="img"></p></li><li><p>常用语句</p><table><thead><tr><th>window对象语句</th><th>含义</th></tr></thead><tbody><tr><td><code>window.open(url,target,param)</code></td><td>打开窗口。 其中url表示要打开的地址；target表示新窗口的位置（ _blank,     _self,    _parent）;param新窗口的设置</td></tr><tr><td><code>window.close()</code></td><td>关闭窗口</td></tr></tbody></table><p><strong>浏览器窗口尺寸获取</strong></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><code>window.innerHeight</code></td><td>浏览器窗口的内部高度，不包括任务栏和滚动条滚动的距离，仅仅值展现网页内容的区域范围</td><td>始用于Chrome、FireFox、Opera、Safari</td></tr><tr><td><code>window.innerWidth</code></td><td>浏览器窗口的内部宽度</td><td></td></tr><tr><td><code>document.documentElement.clientHeight</code></td><td>适用于 IE5,6,7,8版本的语句</td><td></td></tr><tr><td><code>document.documentElement.clientWidth</code></td><td></td><td></td></tr><tr><td><code>document.body.clientHeight</code></td><td></td><td></td></tr><tr><td><code>document.body.clientWidth</code></td><td></td><td></td></tr><tr><td><code>screen.availWidth</code></td><td>可用的屏幕宽度，不会随着浏览器的拉动而变化</td><td></td></tr><tr><td><code>screen.availHeight</code></td><td></td><td></td></tr></tbody></table></li></ul><h2 id="五、JS渲染"><a href="#五、JS渲染" class="headerlink" title="五、JS渲染"></a>五、JS渲染</h2><ul><li><p>（一）、渲染的定义：整个渲染的过程其实就是将URL对应的各种资源，通过浏览器渲染引擎的解析，输出可视化的图像</p></li><li><p>（二）、渲染的步骤：1.HTML解析：将HTML文本解析成DOM树（文档对象模型）2.CSS解析：CSS对象模型3.将CSS与DOM合并，构建渲染树（renderingtree）4.布局和绘制</p></li><li><p>（三）、reflow回流和repaing重绘</p><ul><li><p>reflow：元素的样式发生改变，影响其父元素和往上追溯的祖先元素，浏览器需要重新渲染的过程。</p><p>涉及到的有：元素的显示与隐藏（树状目录的折叠展开）、占位面积（变大变小）、定位方式、文字大小、hover伪类的激活，class操作，style属性改变。</p></li><li><p>（重绘）：不影响周围或内部布局的属性，只是改变元素的<strong>背景色、文字</strong></p></li></ul></li></ul><h2 id="六、对象的几种创建方法"><a href="#六、对象的几种创建方法" class="headerlink" title="六、对象的几种创建方法"></a>六、对象的几种创建方法</h2><ul><li><p>1.字面量创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'范冰冰'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    hello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am is "</span>+<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.构造函数：</p><ul><li>①.系统自带的构造函数 Object()  var obj = new Object() 和1方法是一样的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  =<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">"张予曦"</span>;</span><br><span class="line">obj.age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><ul><li><p>自定义构造函数：也是一样通过<code>new</code> 创建实例，为了区分其他，采用驼峰命名法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fucntion Person(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.health = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'yellow'</span>;</span><br><span class="line">    <span class="keyword">this</span>.live = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.health--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="扩-原型链的相关知识"><a href="#扩-原型链的相关知识" class="headerlink" title="扩-原型链的相关知识"></a>扩-原型链的相关知识</h2><p>接上节 对象的创建方法，构造函数通常都具有 属性<code>prototype</code>  和<code>constructor</code> ，而通过new 创建的实例具有属性<code>_proto_</code> ，并且<code>per1._proto_ == Person.prototype</code> ，<code>Person.prototype.constructor == Person</code></p><p> 细节：</p><ul><li><p>控制台打印：</p><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps6.jpg" alt="img"></p></li></ul><p>per1._proto_和Person.prototype 是相等的。</p><ul><li><p>同时点开 constructor，发现 constructor构造器就是指向构造函数Person的</p><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps7.jpg" alt="img"></p></li><li><p>与此同时，原型上也具有 <strong>proto</strong>,点开发现，<strong>proto</strong>是指向Object的。</p><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps8.jpg" alt="img"></p></li><li><p>这样我们就可以得出一个结论，构造函数的原型同时又是 Object的实例，又可以形成 一个原型链，效果如图所示。</p></li></ul><p><img src="file:///C:%5CUsers%5CASUS%5CAppData%5CLocal%5CTemp%5Cksohtml13596%5Cwps9.jpg" alt="img"></p><h2 id="扩2-继承"><a href="#扩2-继承" class="headerlink" title="扩2-继承"></a>扩2-继承</h2><p>从优到劣，三种继承方式</p><ul><li><p>原型继承</p><ul><li><p>通过更改 <code>prototype</code> 和 <code>constructor</code> 的指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">Student.prototype.constructor = Student;</span><br></pre></td></tr></table></figure><p>Student需要继承Person。Student的prototype == Person，Student原型链上的构造器指向自己。</p><p>优缺点：1.公共属性上的值可读不可写；2.所有经由Student new出来的实例对于Person 上的属性是共享的。</p></li></ul></li><li><p>借用构造函数</p></li><li><p>借用构造函数（通过call）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'zss'</span>;</span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,score</span>)</span>&#123;</span><br><span class="line">Person.call(<span class="keyword">this</span>,name,age);</span><br><span class="line"><span class="keyword">this</span>.score = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优缺点：继承过来的属性都是在自己身上的，可读可写的。同时构造器也是正确的。</p><p>​                方法没有继承，仅仅继承了属性</p></li><li><p>组合继承方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype =Person.prototype;</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,score</span>)</span>&#123;</span><br><span class="line">Person.call(<span class="keyword">this</span>,name,age);</span><br><span class="line"><span class="keyword">this</span>.score = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="八、call和apply的应用区别"><a href="#八、call和apply的应用区别" class="headerlink" title="八、call和apply的应用区别"></a>八、call和apply的应用区别</h2><ul><li>语法上：<ul><li>apply只能传两个参数，且第二个参数为数据</li><li>call可以传多个参数</li></ul></li></ul><h2 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h2><ul><li><code>Array.isArray(arr)</code></li><li><code>arr instanceof Array</code></li><li><code>Object.prototype.toString.call()</code> 基本的数据类型都可以判断，即使是null 和undefined</li></ul><h2 id="获取可视区高度"><a href="#获取可视区高度" class="headerlink" title="获取可视区高度"></a>获取可视区高度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClient</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">width: <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth ||<span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">     height: <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight  ||<span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
